<?xml version="1.0"?>
<doc>
    <assembly>
        <name>solversdk</name>
    </assembly>
    <members>
        <member name="T:SolverPlatform.OptIIS">
            <summary>
            Implements an Irreducibly Infeasible Subset of the constraints and variable bounds 
            in an optimization problem.
            </summary>
        </member>
        <member name="M:SolverPlatform.OptIIS.#ctor">
            <summary>
            Creates new OptIIS object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.OptIIS.Dispose">
            <summary>
            Disposes the object. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="P:SolverPlatform.OptIIS.NumBounds">
            <summary>
            Gets the number of bounds in the IIS.
            </summary>
        </member>
        <member name="P:SolverPlatform.OptIIS.NumConstraints">
            <summary>
            Gets the number of constraints in the IIS.
            </summary>
        </member>
        <member name="P:SolverPlatform.OptIIS.BoundIndex">
            <summary>
            Gets bound index. Vector with NumBounds elements, indicating which bounds are in the IIS.
            </summary>
        </member>
        <member name="P:SolverPlatform.OptIIS.BoundStatus">
            <summary>
            Gets bound status. Vector with NumBounds elements, indicating the status of the bounds in the IIS.
            </summary>
        </member>
        <member name="P:SolverPlatform.OptIIS.ConstraintIndex">
            <summary>
            Gets constraint index. Vector with NumConstraint elements, indicating which constraints are in the IIS.
            </summary>
        </member>
        <member name="P:SolverPlatform.OptIIS.ConstraintStatus">
            <summary>
            Gets constraint status. Vector with NumConstraints elements, indicating the status of the constraints in the IIS.
            </summary>
        </member>
        <member name="T:SolverPlatform.FunctionCollection">
            <summary>
            Implements a collection of Functions.
            </summary>
        </member>
        <member name="M:SolverPlatform.FunctionCollection.#ctor">
            <summary>
            Constructs FunctionCollection object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.FunctionCollection.Dispose">
            <summary>
            Disposes the collection. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.FunctionCollection.Clear">
            <summary>
            Removes all functions associated with this collection.
            </summary>
        </member>
        <member name="M:SolverPlatform.FunctionCollection.Add(SolverPlatform.Function)">
            <summary>
            Adds a new function to the end of the collection.
            </summary>
            <param name="fn">The function to be added to the end of the collection.</param>
            <returns>Returns the index at which the function has been added.</returns>
        </member>
        <member name="M:SolverPlatform.FunctionCollection.Insert(System.Int32,SolverPlatform.Function)">
            <summary>
            Inserts a function into the collection at the specified index.
            </summary>
            <param name="Index">The zero-based index at which new function should be inserted.</param>
            <param name="fn">The function to insert.</param>
        </member>
        <member name="M:SolverPlatform.FunctionCollection.Remove(System.Int32)">
            <summary>
            Removes the function at the specified index.
            </summary>
            <param name="Index">The zero-based index of the function to remove.</param>
        </member>
        <member name="M:SolverPlatform.FunctionCollection.Remove(System.String)">
            <summary>
            Removes the function with the specified name.
            The name is not case sensitive.
            </summary>
            <param name="Index">The name of the function to remove.</param>
        </member>
        <member name="M:SolverPlatform.FunctionCollection.GetEnumerator">
            <summary>
            returns an enumerator to the collection
            </summary>
            <returns> an enumerator to the collection</returns>
        </member>
        <member name="P:SolverPlatform.FunctionCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:SolverPlatform.FunctionCollection.Item(System.Int32)">
            <summary>
            Gets the function at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.FunctionCollection.Item(System.String)">
            <summary>
            Gets the function with the specified name.
            The name is not case sensitive.
            </summary>
        </member>
        <member name="T:SolverPlatform.Evaluator">
            <summary>
            User defined callback interface.
            The user can supply an EvaluateEventHandler event or INEvaluator interface to compute values 
            for problem functions, samples for uncertain variables or just simply to iterate during the 
            calculation process.
            </summary>
        </member>
        <member name="M:SolverPlatform.Evaluator.#ctor">
            <summary>
            Constructs Evaluator object.
            </summary>
        </member>
        <member name="M:SolverPlatform.Evaluator.#ctor(SolverPlatform.EvaluateEventHandler,System.Object)">
            <summary>
            Constructs an empty evaluator and initializes it with the user specific data.
            </summary>
            <param name="e">Event handler for the evaluator.</param>
            <param name="RefUser">User specific data.</param>
        </member>
        <member name="M:SolverPlatform.Evaluator.#ctor(SolverPlatform.INEvaluator,System.Object)">
            <summary>
            Constructs an empty evaluator and initializes it with the user specific data.
            </summary>
            <param name="EvalI">Interface of type INEvaluator</param>
            <param name="RefUser">User specific data.</param>
        </member>
        <member name="M:SolverPlatform.Evaluator.Dispose">
            <summary>
            Disposes the evaluator. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="P:SolverPlatform.Evaluator.Problem">
            <summary>
            Gets Problem associated to this evaluator.
            </summary>
        </member>
        <member name="P:SolverPlatform.Evaluator.EvalType">
            <summary>
            Gets the type of the evaluator. Each evaluator is called for a different action
            during the calculation process. 
            </summary>
        </member>
        <member name="P:SolverPlatform.Evaluator.EvalInterface">
            <summary>
            Gets/Sets the user specific callback interface.
            </summary>
        </member>
        <member name="P:SolverPlatform.Evaluator.EvalCallback">
            <summary>
            Adds/Removes callback EventHandler for this evaluator.
            </summary>
        </member>
        <member name="P:SolverPlatform.Evaluator.RefUser">
            <summary>
            Get/Set user specific data.
            </summary>
        </member>
        <member name="E:SolverPlatform.Evaluator.OnEvaluate">
            <summary>
             Adds/Removes callback EventHandler for this evaluator.
            </summary>
        </member>
        <member name="P:SolverPlatform.Evaluator.License">
            <summary>
            Gets/Sets License.
            </summary>
        </member>
        <member name="P:SolverPlatform.Evaluator.LicenseLoc">
            <summary>
            Gets/Sets license location.
            </summary>
        </member>
        <member name="T:SolverPlatform.EvaluatorCollection">
            <summary>
            Implements a collection of evaluators.
            </summary>
        </member>
        <member name="M:SolverPlatform.EvaluatorCollection.#ctor">
            <summary>
            Constructs EvaluatorCollection object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.EvaluatorCollection.Dispose">
            <summary>
            Disposes the collection. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.EvaluatorCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:SolverPlatform.EvaluatorCollection.Remove(SolverPlatform.Eval_Type)">
            <summary>
            Removes the evaluator for the specified type.
            </summary>
            <param name="nEvalType">Evaluator to remove.</param>
        </member>
        <member name="P:SolverPlatform.EvaluatorCollection.Item(System.Int32)">
            <summary>
            Gets/Set the element at the specified index.
            </summary>
        </member>
        <member name="T:SolverPlatform.EngineCollection">
            <summary>
            Implements a collection of engines.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineCollection.#ctor">
            <summary>
            Constructs EngineCollection object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineCollection.Dispose">
            <summary>
            Disposes the object. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineCollection.Add(SolverPlatform.Engine)">
            <summary>
            Adds a new engine to the end of the collection.
            </summary>
            <param name="engine">The engine to be added to the end of the collection.</param>
            <returns>The index at which the engine has been added.</returns>
        </member>
        <member name="M:SolverPlatform.EngineCollection.Insert(System.Int32,SolverPlatform.Engine)">
            <summary>
            Inserts an engine into the collection at the specified index.
            </summary>
            <param name="Index">The zero-based index at which new engine should be inserted.</param>
            <param name="engine">The engine to insert.</param>
        </member>
        <member name="M:SolverPlatform.EngineCollection.Clear">
            <summary>
            Removes external engines from the collection.
            Internal engines connot be removed.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineCollection.Remove(System.Int32)">
            <summary>
            Removes the engine at the specified index. Only external engines could be removed.
            </summary>
            <param name="Index">The zero-based index of the engine to remove.</param>
        </member>
        <member name="M:SolverPlatform.EngineCollection.Remove(System.String)">
            <summary>
            Removes the engine with the specified name. Only external engines could be removed.
            </summary>
            <param name="Index">The name of the engine to remove.</param>
        </member>
        <member name="M:SolverPlatform.EngineCollection.GetEnumerator">
            <summary>
            returns an enumerator to the collection
            </summary>
            <returns>an enumerator to the collection</returns>
        </member>
        <member name="M:SolverPlatform.EngineCollection.Discover(System.String)">
            <summary>
            Discovers any external engines in the given path, or in the same directory as SDK DLL.
            </summary>
            <param name="Path">Path where to search for external engines.</param>
            <returns>The number of engines added to the collection.</returns>
        </member>
        <member name="M:SolverPlatform.EngineCollection.Discover">
            <summary>
            Discovers any external engines in the same directory as SDK DLL.
            </summary>
            <returns>The number of engines added to the collection.</returns>
        </member>
        <member name="P:SolverPlatform.EngineCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineCollection.Item(System.Int32)">
            <summary>
            Gets the engine at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineCollection.Item(System.String)">
            <summary>
            Gets the engine with the specified name.
            The name is not case sensitive.
            </summary>
        </member>
        <member name="T:SolverPlatform.Environment">
            <summary>
            Contains global data and methods that are independent of any Problem. 
            
            There can be only one instance of the Environment class; it may be created 
            by any application, but it must be created by an ISV application that 
            will be shipped to customers with its own form of license control.  
            
            If there are more than one instance of Environment object then all instances
            share the same data.
            
            An ISV application must set the Environment object’s ISVID property (RuntimeID)
            before creating any Problem instances.
            </summary>
        </member>
        <member name="M:SolverPlatform.Environment.#ctor">
            <summary>
            Constructs Environment object.
            </summary>
        </member>
        <member name="M:SolverPlatform.Environment.#ctor(System.String)">
            <summary>
            Constructs Environment based on the RuntimeID.
            </summary>
            <param name="RuntimeID">Runtime application identifier</param>
        </member>
        <member name="P:SolverPlatform.Environment.RuntimeID">
            <summary>
            Gets/Sets runtime application identifier.
            </summary>
        </member>
        <member name="P:SolverPlatform.Environment.LockCode">
            <summary>
            Gets the lock code for the machine on which Solver Platform SDK is running.
            </summary>
        </member>
        <member name="P:SolverPlatform.Environment.License">
            <summary>
            Gets/Sets License.
            </summary>
        </member>
        <member name="P:SolverPlatform.Environment.LicenseLoc">
            <summary>
            Gets/Sets License Location.
            </summary>
        </member>
        <member name="P:SolverPlatform.Environment.LicenseFile">
            <summary>
            Gets/Sets License File.
            </summary>
        </member>
        <member name="T:SolverPlatform.SolverCollection">
            <summary>
            Implements a collection of Solvers.
            </summary>
        </member>
        <member name="M:SolverPlatform.SolverCollection.#ctor">
            <summary>
            Constructs CSolverCollection object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.SolverCollection.Dispose">
            <summary>
            Disposes the collection. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.SolverCollection.Clear">
            <summary>
            Removes all solvers associated with this collection.
            </summary>
        </member>
        <member name="M:SolverPlatform.SolverCollection.Add(SolverPlatform.Solver)">
            <summary>
            Adds a new solver to the end of the collection.
            </summary>
            <param name="s">The solver to be added to the end of the collection.</param>
            <returns>The index at which the solver has been added.</returns>
        </member>
        <member name="M:SolverPlatform.SolverCollection.Insert(System.Int32,SolverPlatform.Solver)">
            <summary>
            Inserts a solver into the collection at the specified index.
            </summary>
            <param name="Index">The zero-based index at which new solver should be inserted.</param>
            <param name="solver">The solver to insert.</param>
        </member>
        <member name="M:SolverPlatform.SolverCollection.Remove(System.Int32)">
            <summary>
            Removes the solver at the specified index.
            </summary>
            <param name="Index">The zero-based index of the solver to remove.</param>
        </member>
        <member name="M:SolverPlatform.SolverCollection.GetEnumerator">
            <summary>
            returns an enumerator to the collection
            </summary>
            <returns> an enumerator to the collection</returns>
        </member>
        <member name="P:SolverPlatform.SolverCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:SolverPlatform.SolverCollection.Item(System.Int32)">
            <summary>
            Gets the solver at the specified index.
            </summary>
        </member>
        <member name="T:SolverPlatform.EngineStat">
            <summary>
            Implements current status of the engine object.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineStat.#ctor">
            <summary>
            Constructs EngineStat object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineStat.Dispose">
            <summary>
            Disposes the the object. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineStat.Milliseconds">
            <summary>
            Gets total time in milliseconds used to perform optimization or simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineStat.Iterations">
            <summary>
            Gets total number of iterations performed (across all subproblems).
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineStat.Subproblems">
            <summary>
            Gets the number of subproblems solved, when top-level algorithm used.
            Otherwise 1.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineStat.LocalSolutions">
            <summary>
            Gets the number of incumbents or locally optimal solutions found, 
            when top-level algorithm used. Otherwise 1.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineStat.FunctionEvals">
            <summary>
            Gets total number of function evalutions.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineStat.JacobianEvals">
            <summary>
            Gets total number of gradient evaluations.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineStat.HessianEvals">
            <summary>
            Gets total number of hessian evaluations.
            </summary>
        </member>
        <member name="T:SolverPlatform.Constants">
            <summary>
            Defines constants for Solver Platform SDK.
            </summary>
        </member>
        <member name="F:SolverPlatform.Constants.PINF">
            <summary>
            Plus infinity value for Solver Platform SDK.
            </summary>
        </member>
        <member name="F:SolverPlatform.Constants.MINF">
            <summary>
            Minus infinity value for Solver Platform SDK.
            </summary>
        </member>
        <member name="T:SolverPlatform.VariableCollection">
            <summary>
            Implements a collection of Variables.
            </summary>
        </member>
        <member name="M:SolverPlatform.VariableCollection.#ctor">
            <summary>
            Constructs CVariableCollection object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.VariableCollection.Dispose">
            <summary>
            Disposes the collection. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.VariableCollection.Add(SolverPlatform.Variable)">
            <summary>
            Adds a new variable to the end of the collection.
            </summary>
            <param name="s">The variable to be added to the end of the collection.</param>
            <returns>The index at which the variable has been added.</returns>
        </member>
        <member name="M:SolverPlatform.VariableCollection.Insert(System.Int32,SolverPlatform.Variable)">
            <summary>
            Inserts a variable into the collection at the specified index.
            </summary>
            <param name="Index">The zero-based index at which new variable should be inserted.</param>
            <param name="var">The variable to insert.</param>
        </member>
        <member name="M:SolverPlatform.VariableCollection.Remove(System.Int32)">
            <summary>
            Removes the variable at the specified index.
            </summary>
            <param name="Index">The zero-based index of the variable to remove.</param>
        </member>
        <member name="M:SolverPlatform.VariableCollection.Remove(System.String)">
            <summary>
            Removes the variable with the specified name.
            The name is not case sensitive.
            </summary>
            <param name="Index">The name of the variable to remove.</param>
        </member>
        <member name="M:SolverPlatform.VariableCollection.GetEnumerator">
            <summary>
            returns an enumerator to the collection
            </summary>
            <returns> an enumerator to the collection</returns>
        </member>
        <member name="P:SolverPlatform.VariableCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:SolverPlatform.VariableCollection.Item(System.Int32)">
            <summary>
            Gets the variable at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.VariableCollection.Item(System.String)">
            <summary>
            Gets the variable with the specified name.
            The name is not case sensitive.
            </summary>
        </member>
        <member name="T:SolverPlatform.DependMatrix">
            <summary>
            Implements a rectangular array of _Depend_Type values. M rows and N columns.
            Sparse or dense.
            </summary>
        </member>
        <member name="M:SolverPlatform.DependMatrix.#ctor">
            <summary>
            Creates an empty _Depend_Type matrix. 
            Number of Rows and Columns are both zero.
            </summary>
        </member>
        <member name="M:SolverPlatform.DependMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates sparse Rows by Columns matrix ordered by column.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.#ctor(SolverPlatform.Array_Order,System.Int32,System.Int32)">
            <summary>
            Creates sparse Rows by Columns matrix ordered by input parameter order.
            </summary>
            <param name="order">Internal order of the matrix- by row, or by column.</param>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.#ctor(System.Int32,System.Int32,SolverPlatform.Depend_Type)">
            <summary>
            Creates dense matrix and initializes all elements to Element parameter.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Element">The element to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.#ctor(SolverPlatform.Array_Order,System.Int32,System.Int32,SolverPlatform.Depend_Type)">
            <summary>
            Creates dense matrix ordered by parameter order and initializes all elements to Element parameter.
            </summary>
            <param name="order">Internal order of the matrix- by row, or by column.</param>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Element">The element to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.#ctor(System.Int32,System.Int32,SolverPlatform.Depend_Type[])">
            <summary>
            Creates dense matrix and initializes it with pElements array.
            The Elements has to be one dimensional Rows * Columns array.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Elements">The array to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.#ctor(SolverPlatform.Array_Order,System.Int32,System.Int32,SolverPlatform.Depend_Type[])">
            <summary>
            Creates dense matrix ordered by parameter order and initializes it with Elements array.
            The Elements has to be one dimensional Rows * Columns array.
            </summary>
            <param name="order">Internal order of the matrix- by row, or by column.</param>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Elements">The array to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32[],SolverPlatform.Depend_Type[])">
            <summary>
            Creates sparse matrix, ordered by column and initializes it using three arrays- 
            starts, indices and elements.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the arrays of indices and values.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Elements">The array of particular elements values.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.#ctor(SolverPlatform.Array_Order,System.Int32,System.Int32,System.Int32[],System.Int32[],SolverPlatform.Depend_Type[])">
            <summary>
            Creates sparse matrix, ordered by order parameter and initializes it using three arrays- 
            starts, indices and elements.
            </summary>
            <param name="order">Internal order of the matrix- by row, or by column.</param>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the arrays of indices and values. The size of Starts is equal to major dimension.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Elements">The array of particular elements values.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32[],SolverPlatform.Depend_Type)">
            <summary>
            Creates sparse matrix and initializes it using two arrays- starts and indices. 
            The elements array is automatically created and populated with Element value.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the array of indices. The size of Starts is equal to major dimension.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Element">The value to fill with.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.#ctor(SolverPlatform.Array_Order,System.Int32,System.Int32,System.Int32[],System.Int32[],SolverPlatform.Depend_Type)">
            <summary>
            Creates sparse matrix, ordered by order parameter and initializes it with two arrays- 
            starts and indices. The elements array is automatically created and populated with 
            Element value.
            </summary>
            <param name="order">Internal order of the matrix- by row, or by column.</param>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the array of indices. The size of Starts is equal to major dimension.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Element">The value to fill with.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.Dispose">
            <summary>
            Disposes the matrix. Frees all allocated resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.DependMatrix.Create(System.Int32,System.Int32)">
            <summary>
            Creates sparse Rows by Columns matrix.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.InitDense(System.Int32,System.Int32,SolverPlatform.Depend_Type[])">
            <summary>
            Creates dense matrix and initializes it with Elements array.
            The Elements array has to be one dimensional Rows * Columns array.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Elements">The array to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.InitDense(System.Int32,System.Int32,SolverPlatform.Depend_Type)">
            <summary>
            Creates dense matrix and initializes all elements to Element parameter
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Element">The element to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.InitSparse(System.Int32,System.Int32,System.Int32[],System.Int32[],SolverPlatform.Depend_Type[])">
            <summary>
            Creates sparse matrix and initializes it with three arrays- 
            starts, indices and elements.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the arrays of indices and values.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Elements">The array of particular elements values.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.InitSparse(System.Int32,System.Int32,System.Int32[],System.Int32[],SolverPlatform.Depend_Type)">
            <summary>
            Creates sparse matrix and initializes it with two arrays- starts and indices. 
            The elements array is automatically created and populated with Element value.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the array of indices. The size of Starts is equal to major dimension.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Element">The element to fill with.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.Destroy">
            <summary>
            Destroys the matrix. 
            After destroying the new matrix is empty (both rows and columns are equal to 0).
            </summary>
        </member>
        <member name="M:SolverPlatform.DependMatrix.Clear">
            <summary>
            Clears the content of the matrix (makes all elements equal to zero). 
            The rows and columns are not changed.
            </summary>
        </member>
        <member name="M:SolverPlatform.DependMatrix.get_Element(System.Int32)">
            <summary>
            Accesses elements of the matrix as one dimensional vector.
            The size of the vector is equal to NumElements.
            </summary>
            <param name="Index">The index of the element.</param>
            <returns>The element from elements array.</returns>
        </member>
        <member name="M:SolverPlatform.DependMatrix.get_MajorStart(System.Int32)">
            <summary>
            Gets the start index for the specified major dimension.
            </summary>
            <param name="Index">The index of the element.</param>
            <returns>The element from major start array.</returns>
        </member>
        <member name="M:SolverPlatform.DependMatrix.get_MajorLength(System.Int32)">
            <summary>
            The number of elements in one column (for columnwise matrices) or 
            in one row (for rowwize) matrices.
            </summary>
            <param name="Index">The index of the element.</param>
            <returns>The element from major length array.</returns>
        </member>
        <member name="M:SolverPlatform.DependMatrix.get_MinorIndex(System.Int32)">
            <summary>
            Gets index of minor dimension, row if the matrix is columnwise or 
            column if the matrix is rowwise.
            </summary>
            <param name="Index">The index of the element.</param>
            <returns>The element from minor index array.</returns>
        </member>
        <member name="M:SolverPlatform.DependMatrix.get_Value(System.Int32,System.Int32)">
            <summary>
            Gets the value of an element of the matrix.
            </summary>
            <param name="Row">The row of the element.</param>
            <param name="Column">The column of the element.</param>
            <returns>The value of an element of the matrix.</returns>
        </member>
        <member name="M:SolverPlatform.DependMatrix.set_Value(System.Int32,System.Int32,SolverPlatform.Depend_Type)">
            <summary>
            Sets the value of an element of the matrix.
            </summary>
            <param name="Row">The row of the element.</param>
            <param name="Column">The column of the element.</param>
            <param name="Value">The new value.</param>
        </member>
        <member name="M:SolverPlatform.DependMatrix.NZBgn">
            <summary>
            Starts fast update operation.
            </summary>
        </member>
        <member name="M:SolverPlatform.DependMatrix.NZEnd">
            <summary>
            Finishes fast update operation.
            </summary>
        </member>
        <member name="M:SolverPlatform.DependMatrix.NZCancel">
            <summary>
            Cancels fast update operation.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.IsEmpty">
            <summary>
            Flag that indicates the matrix is empty.
            Empty matrices have zero dimensions.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.IsSparse">
            <summary>
            Flag that indicates sparse or dense storage of the matrix.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.ArrayOrder">
            <summary>
            Get/Set	the ArrayOrder of the matrix; 
            Array order specifies which dimension is major- columns or rows.
            Default array order is by column. Changing the ArrayOrder property
            transposes the matrix.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.MajorDim">
            <summary>
            Gets the major (first) dimension. 
            Could be rows or columns depending on ArrayOrder property.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.MinorDim">
            <summary>
            Gets the minor (second) dimension. 
            Could be rows or columns depending on ArrayOrder property.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.Rows">
            <summary>
            Gets number of rows in the matrix. 
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.Columns">
            <summary>
            Gets number of columns in the matrix.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.NumElements">
            <summary>
            Actual number of non-zero elements stored in a sparse matrix or the number of 
            all elements (Rows*Columns) in the dense case.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.Element">
            <summary>
            Accesses elements of the matrix as one dimensional vector.
            The size of the vector is equal to NumElements.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.MajorStart">
            <summary>
            Gets the start index for the specified major dimension.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.MajorLength">
            <summary>
            The number of elements in one column (for columnwise matrices) or 
            in one row (for rowwize) matrices.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.MinorIndex">
            <summary>
            Gets index of minor dimension, row if the matrix is columnwise or 
            column if the matrix is rowwise.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.Item(System.Int32,System.Int32)">
            <summary>
            The value of an element of the matrix.
            </summary>
            <param name="Row">The number of rows.</param>
            <param name="Column">The number of columns.</param>
        </member>
        <member name="P:SolverPlatform.DependMatrix.InternalMajorStarts">
            <summary>
            Gets all major starts as one dimensional vector.
            In dense case returns null (Nothing in VB.NET).
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.InternalMinorIndices">
            <summary>
            Gets all minor indices as one dimensional array.
            In dense case returns null (Nothing in VB.NET).
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrix.InternalValues">
            <summary>
            Gets all values as one dimensional array.
            </summary>
        </member>
        <member name="T:SolverPlatform.DependMatrixMajorStartCollection">
            <summary>
            Gets the start index for the specified major dimension.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrixMajorStartCollection.Item(System.Int32)">
            <summary>
            Gets the start index for the specified major dimension.
            </summary>
            <param name="Index">The index of the major start element.</param>
        </member>
        <member name="T:SolverPlatform.DependMatrixMajorLengthCollection">
            <summary>
            The number of elements in one column (for columnwise matrices) or 
            in one row (for rowwise) matrices.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrixMajorLengthCollection.Item(System.Int32)">
            <summary>
            The number of elements in one column (for columnwise matrices) or 
            in one row (for rowwise) matrices.
            </summary>
            <param name="Index">The index of the element.</param>
        </member>
        <member name="T:SolverPlatform.DependMatrixElementCollection">
            <summary>
            Accesses elements of the matrix as one dimensional vector.
            The size of the vector is equal to NumElements.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrixElementCollection.Item(System.Int32)">
            <summary>
            Accesses elements of the matrix as one dimensional vector.
            The size of the vector is equal to NumElements.
            </summary>
            <param name="Index">The index inside elements array.</param>
        </member>
        <member name="T:SolverPlatform.DependMatrixMinorIndexCollection">
            <summary>
            Gets index of minor dimension, row if the matrix is columnwise or 
            column if the matrix is rowwise.
            </summary>
        </member>
        <member name="P:SolverPlatform.DependMatrixMinorIndexCollection.Item(System.Int32)">
            <summary>
            Gets index of minor dimension, row if the matrix is columnwise or 
            column if the matrix is rowwise.
            </summary>
            <param name="Index">The index of the element.</param>
        </member>
        <member name="T:SolverPlatform.Function">
            <summary>
            Implements a vector of functions, all of the same type, in the Model.
            Function has a FunctionType and an optional Name. 
            
            A Function has properties that are "inputs" to the solution process, such as LowerBound 
            and UpperBound, and properties that are "outputs" from the solution process, such as 
            FinalValue, DualValue, DualLower, and DualUpper.
            </summary>
        </member>
        <member name="M:SolverPlatform.Function.#ctor">
            <summary>
            Constructs function object.
            </summary>
        </member>
        <member name="M:SolverPlatform.Function.#ctor(SolverPlatform.Function_Type)">
            <summary>
            Constructs function object. 
            </summary>
            <param name="FuncType">The type of the function.</param>
        </member>
        <member name="M:SolverPlatform.Function.#ctor(SolverPlatform.Function_Type,System.String)">
            <summary>
            Constructs function object. 
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="Name">The name of the function.</param>
        </member>
        <member name="M:SolverPlatform.Function.#ctor(SolverPlatform.Function_Type,System.String,System.Int32)">
            <summary>
            Constructs function object. 
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="Name">The name of the function.</param>
            <param name="Size">The size of the function.</param>
        </member>
        <member name="M:SolverPlatform.Function.Dispose">
            <summary>
            Disposes the function. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.Function.MakeCurrent">
            <summary>
            Makes this function the current one for the associated problem.
            </summary>
        </member>
        <member name="M:SolverPlatform.Function.GetCorrelation(System.Int32)">
            <summary>
            Returns the correlation values of some functions.
            </summary>
            <param name="fcnindex">index of uncertain function with which elements of this function vector are correlated.</param>
            <returns>correlation coefficients between uncertain function and elements of this function vector.</returns>
        </member>
        <member name="M:SolverPlatform.Function.GetFrequency(SolverPlatform.Frequency_Type,System.Double[])">
            <summary>
            Returns frequency of observations in each bin – sorted up or down if Frequency_Type is cumulative.
            </summary>
            <param name="frequencytype">see Frequency_Type enum – density or cumulative</param>
            <param name="binBoundary">lower bound of each bin, extra element is upper bound of last bin</param>
            <returns>frequency of observations in each bin – sorted up or down if Frequency_Type is cumulative</returns>
        </member>
        <member name="M:SolverPlatform.Function.NonNegative">
            <summary>
            Sets the lower bound to 0 of the function vector.
            </summary>
        </member>
        <member name="M:SolverPlatform.Function.Relation(SolverPlatform.Cons_Rel[],System.Double[])">
            <summary>
            Sets the upper and lower bounds on the function vector, based on the relation;
            greater than, less than or equal to, and the right hand side.
            </summary>
            <param name="relation">an array of relations.</param>
            <param name="rhs">an array of values</param>
        </member>
        <member name="P:SolverPlatform.Function.Problem">
            <summary>
            Gets Problem associated to this function.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.FunctionType">
            <summary>
            Gets/Sets the type of the function vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.Name">
            <summary>
            Gets/Sets the name of the function vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.Value">
            <summary>
            Gets/Sets current values of the function vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.Size">
            <summary>
            Gets/Sets the number of elements in the function vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.Index">
            <summary>
            Gets the index in Functions collection.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.Position">
            <summary>
            Gets the position of the function vector; 
            Starting position of the function vector in the Model flat address space.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.Percentiles">
            <summary>
            Gets the matrix of Percentiles; Only for uncertain functions.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.AllTrials">
            <summary>
            Gets	the matrix of AllTrials; Only for uncertain functions.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.LowerBound">
            <summary>
             Gets/Sets lower bound of the function vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.UpperBound">
            <summary>
            Gets/Sets upper bound of the function vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.InitialValue">
            <summary>
            Gets/Sets initial value of the function vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.FinalValue">
            <summary>
            Gets final values of the function vector after optimization or simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.DualValue">
            <summary>
            Gets dual values of the function vector. Dual Values or shadow prices of the function vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.DualLower">
            <summary>
            Gets dual lower values of the function vector; 
            Lower range values of the right hand sides for 
            which the dual values are valid.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.DualUpper">
            <summary>
            Gets dual upper values of the function vector; 
            Upper range values of the right hand sides for 
            which the dual values are valid.
            </summary>
        </member>
        <member name="P:SolverPlatform.Function.Statistics">
            <summary>
            Gets statistics for this function.
            </summary>
        </member>
        <member name="T:SolverPlatform.EngineLimitCollection">
            <summary>
            Gets the engine limits indexed by problem type.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineLimitCollection.Item(SolverPlatform.Problem_Type)">
            <summary>
            Gets the engine limits indexed by problem type.
            </summary>
        </member>
        <member name="T:SolverPlatform.Problem">
            <summary>
            Implements the fundametal class of all classes defined in Solver Platform SDK.
            A Problem has as its "children" one Model and collections Solvers, Engines, Evaluators, 
            Variables, Functions, and Cases.
            The Problem’s properties describe the type of analysis to be performed. 
            </summary>
        </member>
        <member name="M:SolverPlatform.Problem.#ctor">
            <summary>
            Creates new problem.
            </summary>
        </member>
        <member name="M:SolverPlatform.Problem.#ctor(SolverPlatform.Solver_Type,System.Int32,System.Int32)">
            <summary>
            Creates new problem. Initializes the type of the solver used and the number of 
            variables and functions. When a simulation Problem is first created, it has as 
            immediate children 1 Variable and 1 Function, each of type Uncertain; when an 
            optimization Problem is first created, it has as immediate children 1 Variable of 
            type Decision, 1 Function of type Constraint, and 1 Function of type Objective.  
            Hence to solve simple problems of each type, no other objects need be created.
            </summary>
            <param name="nSolverType">Solver type.</param>
            <param name="nNumVars">Number of variables</param>
            <param name="nNumFcns">Number of functions</param>
        </member>
        <member name="M:SolverPlatform.Problem.Dispose">
            <summary>
            Disposes the object. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.Problem.Init(SolverPlatform.Solver_Type,System.Int32,System.Int32)">
            <summary>
            Initializes the problem from particular type and number of variables and functions.
            This method could be called once after the problem has been constructed by its
            empty constructor.
            </summary>
            <param name="SolverType">solver type</param>
            <param name="NumVars">number of variables</param>
            <param name="NumFcns">number of functions</param>
        </member>
        <member name="M:SolverPlatform.Problem.Load(System.String,SolverPlatform.File_Format)">
            <summary>
            Loads a problem from a file.
            </summary>
            <param name="ProblemSpecFile">The path to the problem file.</param>
            <param name="FileFormat">Format of the file.</param>
        </member>
        <member name="M:SolverPlatform.Problem.Load(System.String)">
            <summary>
            Loads a problem from a file. Solver SDK automatically recognizes its format.
            </summary>
            <param name="ProblemSpecFile">The path to the problem file.</param>
        </member>
        <member name="M:SolverPlatform.Problem.Save(System.String,SolverPlatform.File_Format)">
            <summary>
            Saves the problem into a file.
            </summary>
            <param name="ProblemSpecFile">The path to the problem file.</param>
            <param name="FileFormat">Format of the file.</param>
        </member>
        <member name="P:SolverPlatform.Problem.ProblemType">
            <summary>
            Gets/Sets problem type. Indicates if a problem is linear, nonlinear, etc.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.ObjectiveIndex">
            <summary>
            Gets/Sets index to current objective function in the optimization. 
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.Name">
            <summary>
            Gets/Sets the name of the problem.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.TrialPeriod">
            <summary>
            Gets the number of days until Solver Platform SDK trial license expires.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.Solver">
            <summary>
            Gets/Sets Current Solver
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.Engine">
            <summary>
            Gets/Sets Current Engine
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.Model">
            <summary>
            Gets Current Model.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.Case">
            <summary>
            Gets/Sets current case.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.VarUncertain">
            <summary>
            Gets/Sets current uncertain variable block.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.FcnUncertain">
            <summary>
            Gets/Sets current uncertain function block.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.VarDecision">
            <summary>
            Gets/Sets current decision variable block.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.FcnConstraint">
            <summary>
            Gets/Sets current constraint function block.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.FcnObjective">
            <summary>
            get/set	current objective function block.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.VarRecourse">
            <summary>
            Gets/Sets	current recourse variable block.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.VarCase">
            <summary>
            Gets/Sets current case variable block.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.FcnCase">
            <summary>
            Gets/Sets current case function block.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.FcnSoftConst">
            <summary>
            Gets/Sets current soft constraint function block.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.Engines">
            <summary>
            Gets collection of engines of different types associated to this problem.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.Solvers">
            <summary>
            Gets collection of solvers associated to this problem.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.Evaluators">
            <summary>
            Gets collection of evaluators (user defined code) associated to this problem.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.Variables">
            <summary>
            Gets collection of variable blocks associated with this problem.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.Functions">
            <summary>
            Gets collection of function blocks associated with this problem.
            </summary>
        </member>
        <member name="P:SolverPlatform.Problem.Cases">
            <summary>
            Gets collection of cases associated with this problem.
            </summary>
        </member>
        <member name="T:SolverPlatform.Solver">
            <summary>
            The Solver class contains the methods to carry out an analysis or solution, 
            which selects a Model, Engine, and possibly customized Variables and Functions.  
            The API anticipates Solvers performing simulation, optimization, and other 
            kinds of analysis.
            </summary>
        </member>
        <member name="M:SolverPlatform.Solver.#ctor">
            <summary>
            Creates new solver object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.Solver.#ctor(SolverPlatform.Solver_Type)">
            <summary>
            Create solver object and initializes its type.
            </summary>
            <param name="solvertype">The type of newly created solver.</param>
        </member>
        <member name="M:SolverPlatform.Solver.Dispose">
            <summary>
            Disposes the object. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.Solver.MakeCurrent">
            <summary>
            Makes this Solver the current one for the associated problem.
            </summary>
        </member>
        <member name="M:SolverPlatform.Solver.Report(System.String,System.String,System.Int32)">
            <summary>
            Creates report for the Solver's activity.
            </summary>
            <param name="ReportSpecFile">filename/path (or worksheet name string) to contain report information</param>
            <param name="ReportName"> the name of the report</param>
            <param name="ReportOutline">0 = don't outline, 1 = outline this report</param>
        </member>
        <member name="M:SolverPlatform.Solver.Simulate">
            <summary>
            Invokes the Simulate functionality of the Solver.
            </summary>
        </member>
        <member name="M:SolverPlatform.Solver.Optimize">
            <summary>
            Invokes the Optimize functionality of the Solver.
            </summary>
        </member>
        <member name="M:SolverPlatform.Solver.IISFind">
            <summary>
            Tries to find an Irreducible Infeasible Subset for an infeasible problem.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.Problem">
            <summary>
            Gets Problem associated to this solver.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.SimulateStatus">
            <summary>
            Gets the status after simulation. Indicates the outcome of a simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.OptimizeStatus">
            <summary>
            Gets the status after optimization. Indicates the outcome of an optimization.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.NumSimulations">
            <summary>
            Gets/Sets the number of simulations to be run.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.NumTrials">
            <summary>
            Gets/Sets the number of trials to be executed during each simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.NumSolutions">
            <summary>
            Gets/Sets the number of solutions to be returned.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.SolutionIndex">
            <summary>
            Gets/Sets the index of the current solution.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.SimulationIndex">
            <summary>
            Gets/Sets the index for the current simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.SolverType">
            <summary>
            Gets/Sets the type of the solver. Minimization, maximization, simulation or find a feasible solution.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.FunctionType">
            <summary>
            Gets currently evaluated function type.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.FunctionIndex">
            <summary>
            Gets index of the currently evaluated function in the flat address space. 
            Ised in hessian evaluators.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.Index">
            <summary>
            Gets the index in solver collection.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.OptIIS">
            <summary>
            Gives the Irreducible Infeasible Subset found by IISFind.
            </summary>
        </member>
        <member name="P:SolverPlatform.Solver.FunctionCurrent">
            <summary>
            Gets function currently being evaluated.
            </summary>
        </member>
        <member name="T:SolverPlatform.DoubleMatrix">
            <summary>
            A rectangular array of doubles. M rows and N columns.
            Sparse or dense.
            </summary>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.#ctor">
            <summary>
            Creates an empty double matrix.
            Rows and Columns are both zero.
            </summary>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates sparse Rows by Columns matrix ordered by column.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.#ctor(SolverPlatform.Array_Order,System.Int32,System.Int32)">
            <summary>
            Creates sparse Rows by Columns matrix ordered by input parameter order.
            </summary>
            <param name="order">Internal order of the matrix- by row, or by column.</param>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Creates dense matrix and initializes all elements to Element parameter.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Element">The element to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.#ctor(SolverPlatform.Array_Order,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates dense matrix ordered by parameter order and initializes all elements to Element parameter.
            </summary>
            <param name="order">Internal order of the matrix- by row, or by column.</param>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Element">The element to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Creates dense matrix and initializes it with Elements array.
            The Elements array has to be one dimensional Rows * Columns array.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Elements">The array to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.#ctor(SolverPlatform.Array_Order,System.Int32,System.Int32,System.Double[])">
            <summary>
            Creates dense matrix ordered by parameter order and initializes it with Elements array.
            The Elements array has to be one dimensional Rows * Columns array.
            </summary>
            <param name="order">Internal order of the matrix- by row, or by column.</param>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Elements">The array to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double[])">
            <summary>
            Creates sparse matrix, ordered by column and initializes it with three arrays- 
            starts, indices and elements.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the arrays of indices and values.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Elements">The array of particular elements values.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.#ctor(SolverPlatform.Array_Order,System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double[])">
            <summary>
            Creates sparse matrix, ordered by order parameter and initializes it with three arrays- 
            starts, indices and elements.
            </summary>
            <param name="order">Internal order of the matrix- by row, or by column.</param>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the arrays of indices and values. The size of pStarts is equal to major dimension.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Elements">The array of particular elements values.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double)">
            <summary>
            Creates sparse matrix and initializes it with two arrays- starts and indices. 
            The elements array is automatically created and populated with Element value.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the array of indices. The size of pStarts is equal to major dimension.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Element">The value to fill with.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.#ctor(SolverPlatform.Array_Order,System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double)">
            <summary>
            Creates sparse matrix, ordered by order parameter and initializes it with two arrays- 
            starts and indices. The elements array is automatically created and populated with 
            Element value.
            </summary>
            <param name="order">Internal order of the matrix- by row, or by column.</param>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the array of indices. The size of pStarts is equal to major dimension.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Element">The value to fill with.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.Dispose">
            <summary>
            Disposes the matrix. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.Create(System.Int32,System.Int32)">
            <summary>
            Creates sparse nRows by nColumns matrix.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.InitDense(System.Int32,System.Int32,System.Double[])">
            <summary>
            Creates dense matrix and initializes it with pElements array.
            The Elements array has to be one dimensional Rows * Columns array.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Elements">The array to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.InitDense(System.Int32,System.Int32,System.Double)">
            <summary>
            Creates dense matrix and initializes all elements to Element parameter.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Element">The element to initialize with.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.InitSparse(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double[])">
            <summary>
            Creates sparse matrix and initializes it with three arrays- 
            starts, indices and elements.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the arrays of indices and values.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Elements">The array of particular elements values.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.InitSparse(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double)">
            <summary>
            Creates sparse matrix and initializes it with two arrays- starts and indices. 
            The elements array is automatically created and populated with Element value.
            </summary>
            <param name="Rows">The number of rows.</param>
            <param name="Columns">The number of columns.</param>
            <param name="Starts">The array of starting points. Each element indicates where the particular major dimension starts in the array of indices. The size of pStarts is equal to major dimension.</param>
            <param name="Indices">The array of indices. Each element is the number of second or minor dimension.</param>
            <param name="Element">The element to fill with.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.Destroy">
            <summary>
            Destroys the matrix. 
            After destroying the new matrix is empty (both rows and columns are equal to 0).
            </summary>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.Clear">
            <summary>
            Clears the content of the matrix (makes all elements equal to zero). 
            The rows and columns are not changed.
            </summary>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.get_Element(System.Int32)">
            <summary>
            Accesses elements of the matrix as one dimensional vector.
            The size of the vector is equal to NumElements.
            </summary>
            <param name="Index">The index inside elements array.</param>
            <returns>The element from elements array.</returns>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.get_MajorStart(System.Int32)">
            <summary>
            Gets the start index for the specified major dimension.
            </summary>
            <param name="Index">index of the major start element.</param>
            <returns>The element from major start array.</returns>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.get_MajorLength(System.Int32)">
            <summary>
            The number of elements in one column (for columnwise matrices) or 
            in one row (for rowwise) matrices.
            </summary>
            <param name="Index">index of the element.</param>
            <returns>The element from major length array.</returns>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.get_MinorIndex(System.Int32)">
            <summary>
            Gets index of minor dimension, row if the matrix is columnwise or 
            column if the matrix is rowwise.
            </summary>
            <param name="Index">index of the element.</param>
            <returns>The element from minor index array.</returns>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.get_Value(System.Int32,System.Int32)">
            <summary>
             The value of an element of the matrix.
            </summary>
            <param name="Row">The row of the element.</param>
            <param name="Column">The column of the element.</param>
            <returns>The value of an element of the matrix.</returns>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.set_Value(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the value of an element of the matrix.
            </summary>
            <param name="Row">The row of the element.</param>
            <param name="Column">The column of the element.</param>
            <param name="Value">The new value.</param>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.NZBgn">
            <summary>
            Starts fast update operation.
            </summary>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.NZEnd">
            <summary>
            Finishes fast update operation.
            </summary>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.NZCancel">
            <summary>
            Cancels fast update operation.
            </summary>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.MakePSD">
            <summary>
            Converts the matrix to positive-definite.
            </summary>
        </member>
        <member name="M:SolverPlatform.DoubleMatrix.MakePSD(SolverPlatform.DoubleMatrix)">
            <summary>
            Converts the matrix to positive-definite.
            </summary>
            <param name="weights">The weights matrix. Specifies how elements will be changed.</param>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.IsEmpty">
            <summary>
            Flag that indicates the matrix is empty.
            Empty matrices have zero dimensions.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.IsSparse">
            <summary>
            Flag that indicates sparse or dense storage of the matrix.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.ArrayOrder">
            <summary>
            Gets/Sets the ArrayOrder of the matrix. Array order specifies 
            which dimension is major- columns or rows. Default array order 
            is by column. Changing the ArrayOrder property transposes the 
            matrix.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.MajorDim">
            <summary>
            Gets the major (first) dimension. 
            Could be rows or columns depending on ArrayOrder property.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.MinorDim">
            <summary>
            Gets the minor (second) dimension. 
            Could be rows or columns depending on ArrayOrder property.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.Rows">
            <summary>
            Gets number of rows in the matrix. 
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.Columns">
            <summary>
            Gets number of columns in the matrix.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.NumElements">
            <summary>
            Actual number of non-zero elements stored in a sparse matrix or the number of 
            all elements (Rows*Columns) in a dense matrix.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.Element">
            <summary>
            Accesses elements of the matrix as one dimensional vector.
            The size of the vector is equal to NumElements.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.MajorStart">
            <summary>
            Gets the start index for the specified major dimension.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.MajorLength">
            <summary>
            The number of elements in one column (for columnwise matrices) or 
            in one row (for rowwise) matrices.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.MinorIndex">
            <summary>
            Gets index of minor dimension, row if the matrix is columnwise or 
            column if the matrix is rowwise.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.Item(System.Int32,System.Int32)">
            <summary>
             The value of an element of the matrix.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.InternalMajorStarts">
            <summary>
            Gets all major starts as one dimensional array.
            In dense case returns null (Nothing in VB.NET).
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.InternalMinorIndices">
            <summary>
            Gets all minor indices as one dimensional array.
            In dense case returns null (Nothing in VB.NET).
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.InternalValues">
            <summary>
            Gets all values as one dimensional array.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrix.IsPSD">
            <summary>
            Checks if the matrix is positive-definite.
            </summary>
        </member>
        <member name="T:SolverPlatform.DoubleMatrixElementCollection">
            <summary>
            Accesses elements of the matrix as one dimensional vector.
            The size of the vector is equal to NumElements.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrixElementCollection.Item(System.Int32)">
            <summary>
            Accesses elements of the matrix as one dimensional vector.
            The size of the vector is equal to NumElements.
            </summary>
            <param name="Index">The index of the element.</param>
        </member>
        <member name="T:SolverPlatform.DoubleMatrixMajorLengthCollection">
            <summary>
            The number of elements in one column (for columnwise matrices) or 
            in one row (for rowwise) matrices.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrixMajorLengthCollection.Item(System.Int32)">
            <summary>
            The number of elements in one column (for columnwise matrices) or 
            in one row (for rowwise) matrices.
            </summary>
            <param name="Index">The index of the element.</param>
        </member>
        <member name="T:SolverPlatform.DoubleMatrixMajorStartCollection">
            <summary>
            Gets the start index for the specified major dimension.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrixMajorStartCollection.Item(System.Int32)">
            <summary>
            Gets the start index for the specified major dimension.
            </summary>
            <param name="Index">The index of the element.</param>
        </member>
        <member name="T:SolverPlatform.DoubleMatrixMinorIndexCollection">
            <summary>
            Gets index of minor dimension, row if the matrix is columnwise or 
            column if the matrix is rowwise.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleMatrixMinorIndexCollection.Item(System.Int32)">
            <summary>
            Gets index of minor dimension, row if the matrix is columnwise or 
            column if the matrix is rowwise.
            </summary>
            <param name="Index">The index of the element.</param>
        </member>
        <member name="T:SolverPlatform.Statistics">
            <summary>
            Implements statistics for variable and function values across a set of trial points. 
            Statistics objects are computed by all simulation and some optimization Solver Engines.
            </summary>
        </member>
        <member name="M:SolverPlatform.Statistics.#ctor">
            <summary>
            Constructs CStatistics object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.Statistics.Dispose">
            <summary>
            Disposes the statistics object. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.Statistics.SemiVariance">
            <summary>
            Gets the semi-variance, or if the power argument is different from 2, the lower partial moment of trials for the variable or function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Statistics.SemiVariance(System.Int32)">
            <summary>
            Gets the semi-variance, or if the power argument is different from 2, the lower partial moment of trials for the variable or function.
            </summary>
            <param name="Power"></param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Statistics.SemiVariance(System.Int32,System.Double)">
            <summary>
            Gets the semi-variance, or if the power argument is different from 2, the lower partial moment of trials for the variable or function.
            </summary>
            <param name="Power"></param>
            <param name="Target"></param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Statistics.SemiDeviation">
            <summary>
            Gets the semi-deviation, which is the square (or powerth) root of the semi-variance for the variable or function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Statistics.SemiDeviation(System.Int32)">
            <summary>
            Gets the semi-deviation, which is the square (or powerth) root of the semi-variance for the variable or function.
            </summary>
            <param name="Power"></param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Statistics.SemiDeviation(System.Int32,System.Double)">
            <summary>
            Gets the semi-deviation, which is the square (or powerth) root of the semi-variance for the variable or function.
            </summary>
            <param name="Power"></param>
            <param name="Target"></param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Statistics.ValueAtRisk(System.Double)">
            <summary>
            Gets the loss amount such that greater losses occur with frequency less than 1 minus the specified percentile for the variable or function.
            </summary>
            <param name="Percentile"></param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Statistics.CondValueAtRisk(System.Double)">
            <summary>
            Gets the expected value of the loss given that a loss occurs that has frequency 1 minus the specified percentile for the variable or function.
            </summary>
            <param name="Percentile"></param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Statistics.MeanCI(System.Double)">
            <summary>
            Returns the confidence interval of the mean value given alpha between 0 and 1 for the specified uncertain function.
            </summary>
            <param name="Confidence"></param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Statistics.StdDevCI(System.Double)">
            <summary>
            Returns the confidence interval of the standard deviation value for the specified uncertain function.
            </summary>
            <param name="Confidence"></param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Statistics.CITrials(System.Double,System.Double)">
            <summary>
            Returns the recommended number of trials given alpha between 0 and 1 and tolerance (half the width of the confidence interval) for the specified uncertain function.
            </summary>
            <param name="Confidence"></param>
            <param name="Tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Statistics.Target(System.Double)">
            <summary>
            Returns the cumulative probability of the target value in the distribution of trial values for the specified uncertain function.
            </summary>
            <param name="TargetValue"></param>
            <returns></returns>
        </member>
        <member name="P:SolverPlatform.Statistics.NumValues">
            <summary>
            Gets the number of values over which statistics are calculated.
            </summary>
        </member>
        <member name="P:SolverPlatform.Statistics.NumErrors">
            <summary>
            Gets the number of errors encountered during the simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Statistics.Minimum">
            <summary>
            Gets the minimum value of the variable or function during the simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Statistics.Maximum">
            <summary>
            Gets the maximum value of the variable or function during the simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Statistics.Mean">
            <summary>
            Gets the mean value of the variable or function over the simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Statistics.StdDev">
            <summary>
            Gets the standard deviation of the variable or function over the simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Statistics.Variance">
            <summary>
            Gets the variance of the variable or function over the simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Statistics.Skewness">
            <summary>
            Gets the Skewness of the variable or function over the simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Statistics.Kurtosis">
            <summary>
            Gets the Kurtosis of the variable or function over the simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Statistics.Mode">
            <summary>
            Gets the Mode of the variable or function over the simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Statistics.MeanAbsDev">
            <summary>
            Gets the average of the absolute deviations of trials from the mean of the variable or function.
            </summary>
        </member>
        <member name="T:SolverPlatform.Model">
            <summary>
            Class CModel defines how the user’s model can be evaluated.
            A model represents user-written code that can be supplied
            with numeric inputs and evaluated to compute numeric outputs.
            </summary>
        </member>
        <member name="M:SolverPlatform.Model.#ctor">
            <summary>
            Constructs Model object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.Model.get_NumVariables(SolverPlatform.Variable_Type)">
            <summary>
            Gets the Number of variables of particular type. Indexed by Variable_Type
            </summary>
            <param name="VarType">The type of the variable.</param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Model.get_NumFunctions(SolverPlatform.Function_Type)">
            <summary>
            Gets the Number of functions of particular type. Indexed by Function_Type.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Model.get_NumAllGrad(SolverPlatform.Function_Type)">
            <summary>
            Gets the number of elements (nonzeroes) in the matrix associated with variable 
            and function type. (The same as prob.Model. AllGradValue[ftype].NumElements.)
            Indexed by Function_Type.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <returns>The number of elements (nonzeroes) in the matrix.</returns>
        </member>
        <member name="M:SolverPlatform.Model.get_NumAllGrad(SolverPlatform.Function_Type,SolverPlatform.Variable_Type)">
            <summary>
            Gets the number of elements (nonzeroes) in the matrix associated with variable 
            and function type. (The same as prob.Model. AllGradValue[ftype].NumElements.)
            Indexed by Function_Type.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <returns>The number of elements (nonzeroes) in the matrix.</returns>
        </member>
        <member name="M:SolverPlatform.Model.get_NumFcnHess(SolverPlatform.Function_Type,System.Int32)">
            <summary>
            Gets Number of elements (nonzeroes) in Hessian matrices associated with function type, 
            index and variable type.(The same as prob.Model. FcnHessValue [ftype][Ind].NumElements.) 
            Indexed by  Function_Type and index.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <returns>The Number of elements (nonzeroes) in the Hessian matrix.</returns>
        </member>
        <member name="M:SolverPlatform.Model.get_NumFcnHess(SolverPlatform.Function_Type,System.Int32,SolverPlatform.Variable_Type)">
            <summary>
            Gets Number of elements (nonzeroes) in Hessian matrices associated with function type, 
            index and variable type.(The same as prob.Model. FcnHessValue [ftype][Ind].NumElements.) 
            Indexed by  Function_Type and index.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <returns>The Number of elements (nonzeroes) in the Hessian matrix.</returns>
        </member>
        <member name="M:SolverPlatform.Model.get_AllLinear(SolverPlatform.Function_Type,SolverPlatform.Variable_Type)">
            <summary>
            Gets the coefficient matrix of a linear model. Indexed by both Variable_Type and Function_Type
            Property of linear functions.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.set_AllLinear(SolverPlatform.Function_Type,SolverPlatform.Variable_Type,SolverPlatform.DoubleMatrix)">
            <summary>
            Sets the coefficient matrix of a linear model. Indexed by both Variable_Type and Function_Type
            Property of linear functions.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.get_AllLinear(SolverPlatform.Function_Type)">
            <summary>
            Gets the coefficient matrix of a linear model. Indexed by Function_Type.
            Property of linear functions.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.set_AllLinear(SolverPlatform.Function_Type,SolverPlatform.DoubleMatrix)">
            <summary>
            Sets the coefficient matrix of a linear model. Indexed by Function_Type.
            Property of linear functions.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.get_AllGradDepend(SolverPlatform.Function_Type,SolverPlatform.Variable_Type)">
            <summary>
            Gets the dependency matrix of a model; Indexed by both  Variable_Type and Function_Type.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.set_AllGradDepend(SolverPlatform.Function_Type,SolverPlatform.Variable_Type,SolverPlatform.DependMatrix)">
            <summary>
            Sets the dependency matrix of a model; Indexed by both Variable_Type and Function_Type.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.get_AllGradDepend(SolverPlatform.Function_Type)">
            <summary>
            Gets the dependency matrix of a model; Indexed by Function_Type.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.set_AllGradDepend(SolverPlatform.Function_Type,SolverPlatform.DependMatrix)">
            <summary>
            Sets the dependency matrix of a model; Indexed by Function_Type.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.get_FcnQuadratic(SolverPlatform.Function_Type,System.Int32,SolverPlatform.Variable_Type)">
            <summary>
            Gets the coefficient matrix of a quadratic function; Indexed by Function_Type, index, 
            and Variable_Type.
            </summary>
            <param name="FunctionType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.set_FcnQuadratic(SolverPlatform.Function_Type,System.Int32,SolverPlatform.Variable_Type,SolverPlatform.DoubleMatrix)">
            <summary>
            Sets the coefficient matrix of a quadratic function; Indexed by  Function_Type, index, 
            and Variable_Type.
            </summary>
            <param name="FunctionType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.get_FcnQuadratic(SolverPlatform.Function_Type,System.Int32)">
            <summary>
            Gets the coefficient matrix of a quadratic function; Indexed by Function_Type and index.
            </summary>
            <param name="FunctionType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.set_FcnQuadratic(SolverPlatform.Function_Type,System.Int32,SolverPlatform.DoubleMatrix)">
            <summary>
            Sets the coefficient matrix of a quadratic function; Indexed by Function_Type and index.
            </summary>
            <param name="FunctionType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.get_FcnHessDepend(SolverPlatform.Function_Type,System.Int32)">
            <summary>
            Gets the dependency matrix of the Hessian in a model; Indexed by  Function_Type and index.
            </summary>
            <param name="FunctionType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.set_FcnHessDepend(SolverPlatform.Function_Type,System.Int32,SolverPlatform.DependMatrix)">
            <summary>
            Sets the dependency matrix of the Hessian in a model; Indexed by  Function_Type and index.
            </summary>
            <param name="FunctionType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.get_FcnHessDepend(SolverPlatform.Function_Type,System.Int32,SolverPlatform.Variable_Type)">
            <summary>
            Gets the dependency matrix of the Hessian in a model; Indexed by  Function_Type, index, 
            and Variable_Type.
            </summary>
            <param name="FunctionType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.set_FcnHessDepend(SolverPlatform.Function_Type,System.Int32,SolverPlatform.Variable_Type,SolverPlatform.DependMatrix)">
            <summary>
            Sets the dependency matrix of the Hessian in a model; Indexed by  Function_Type, index, 
            and Variable_Type.
            </summary>
            <param name="FunctionType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.get_NameVariable(System.String)">
            <summary>
            Gets NameVariable. Reserved for future use.
            </summary>
            <param name="Index">The name of the variable.</param>
            <returns>The variable.</returns>
        </member>
        <member name="M:SolverPlatform.Model.get_NameFunction(System.String)">
            <summary>
            Gets NameFunction. Reserved for future use.
            </summary>
            <param name="Index">The name of the function.</param>
            <returns>The function.</returns>
        </member>
        <member name="M:SolverPlatform.Model.get_IndexVariable(System.Int32)">
            <summary>
            Gets Variable pointed to by index in the flat address space.
            </summary>
            <param name="Index">The index to the variable.</param>
            <returns>The variable.</returns>
        </member>
        <member name="M:SolverPlatform.Model.get_IndexFunction(System.Int32)">
            <summary>
            Gets Function pointed to by index in the flat address space.
            </summary>
            <param name="Index">The index to the function.</param>
            <returns>The function.</returns>
        </member>
        <member name="M:SolverPlatform.Model.get_AllGradError(SolverPlatform.Function_Type)">
            <summary>
            Gets the matrix of AllGradError elements; Can be used with a Jacobian evaluator. 
            Indexed by Function_Type. 
            </summary>
            <param name="FuncType">The type of the function.</param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Model.get_AllGradError(SolverPlatform.Function_Type,SolverPlatform.Variable_Type)">
            <summary>
            Gets the matrix of AllGradError elements; Can be used with a Jacobian evaluator. 
            Indexed by both  Variable_Type and Function_Type.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <returns></returns>
        </member>
        <member name="M:SolverPlatform.Model.get_AllGradValue(SolverPlatform.Function_Type)">
            <summary>
            Gets the matrix of derivative values for a model. Indexed by Function_Type. 
            </summary>
            <param name="FuncType">The type of the function.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.get_AllGradValue(SolverPlatform.Function_Type,SolverPlatform.Variable_Type)">
            <summary>
            Gets the matrix of derivative values for a model. Indexed by both Variable_Type 
            and Function_Type. 
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.set_AllGradValue(SolverPlatform.Function_Type,SolverPlatform.DoubleMatrix)">
            <summary>
            Sets the matrix of derivative values for a model. Indexed by Function_Type. 
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.set_AllGradValue(SolverPlatform.Function_Type,SolverPlatform.Variable_Type,SolverPlatform.DoubleMatrix)">
            <summary>
            Sets the matrix of derivative values for a model. Indexed by both Variable_Type 
            and Function_Type. 
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.get_FcnHessValue(SolverPlatform.Function_Type,System.Int32)">
            <summary>
            Gets the coefficients of a Hessian matrix for a function. Indexed by  Function_Type and index.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.get_FcnHessValue(SolverPlatform.Function_Type,System.Int32,SolverPlatform.Variable_Type)">
            <summary>
            Gets the coefficients of a Hessian matrix for a function. Indexed by Function_Type, 
            index, and Variable_Type. 
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <returns>The new matrix to be set.</returns>
        </member>
        <member name="M:SolverPlatform.Model.set_FcnHessValue(SolverPlatform.Function_Type,System.Int32,SolverPlatform.DoubleMatrix)">
            <summary>
            Sets the coefficients of a Hessian matrix for a function. Indexed by  Function_Type and index.
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.set_FcnHessValue(SolverPlatform.Function_Type,System.Int32,SolverPlatform.Variable_Type,SolverPlatform.DoubleMatrix)">
            <summary>
            Sets the coefficients of a Hessian matrix for a function. Indexed by  Function_Type, 
            index, and Variable_Type. 
            </summary>
            <param name="FuncType">The type of the function.</param>
            <param name="Index">The index of the function.</param>
            <param name="VarType">The type of the variable.</param>
            <param name="value">The new matrix to be set.</param>
        </member>
        <member name="M:SolverPlatform.Model.VarIndexName(System.Int32,System.Int32,System.String@)">
            <summary>
            Reserved for future use.
            </summary>
            <param name="index">the element's index to translate</param>
            <param name="elements">the count of elements to be translated</param>
            <param name="Name">output name.</param>
        </member>
        <member name="M:SolverPlatform.Model.FcnIndexName(System.Int32,System.Int32,System.String@)">
            <summary>
            Reserved for future use.
            </summary>
            <param name="index">the element's index to translate</param>
            <param name="elements">the count of elements to be translated.</param>
            <param name="Name">output name.</param>
        </member>
        <member name="M:SolverPlatform.Model.NameVarIndex(System.String,System.Int32@,System.Int32@)">
            <summary>
            Reserved for future use.
            </summary>
            <param name="pszName">the model name to be translated.</param>
            <param name="Index">starting index</param>
            <param name="Elements">the count of elements </param>
        </member>
        <member name="M:SolverPlatform.Model.NameFcnIndex(System.String,System.Int32@,System.Int32@)">
            <summary>
            Reserved for future use.
            </summary>
            <param name="pszName">the model name to be translated</param>
            <param name="Index">starting index</param>
            <param name="Elements">the count of elements</param>
        </member>
        <member name="M:SolverPlatform.Model.DependTest(SolverPlatform.Variable_Type,System.Int32,System.Double[])">
            <summary>
            Determines the type of problem from random or given testvalues.
            </summary>
            <param name="vartypes">the type of variables</param>
            <param name="numtests">the number of of tests to be performed.</param>
            <param name="testvals">array of of test values.</param>
        </member>
        <member name="M:SolverPlatform.Model.DependTest(SolverPlatform.Variable_Type,System.Int32)">
            <summary>
            Determines the type of problem from random or given testvalues.
            </summary>
            <param name="vartypes">the type of variables</param>
            <param name="numtests">the number of of tests to be performed.</param>
        </member>
        <member name="M:SolverPlatform.Model.Distribution(System.Int32,System.String)">
            <summary>
            Sets distribution for a variable in the flat address space.
            </summary>
            <param name="index">the index to the variable.</param>
            <param name="distribdecl">Distribution function declaration. For example: PsiUniform(0,2)</param>
        </member>
        <member name="P:SolverPlatform.Model.Problem">
            <summary>
            Gets Problem associated to this model.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.NumVariables">
            <summary>
            Gets the Number of variables of particular type. Indexed by Variable_Type
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.NumFunctions">
            <summary>
            Gets the Number of functions of particular type. Indexed by Function_Type.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.NumAllGrad">
            <summary>
            Gets the number of elements (nonzeroes) in the matrix associated with variable 
            and function type. (The same as prob.Model. AllGradValue[ftype].NumElements.)
            Indexed by both Variable_Type and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.NumFcnHess">
            <summary>
            Gets Number of elements (nonzeroes) in Hessian matrices associated with function type, 
            index and variable type.(The same as prob.Model. FcnHessValue [ftype][Ind].NumElements.) 
            Indexed by Function_Type, index and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.NumDistArguments">
            <summary>
            Gets the count of distribution arguments; Property of uncertain variables.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.MaxDistArguments">
            <summary>
            Gets the maximum number of distribution arguments; Property of uncertain variables.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.NumCorrelations">
            <summary>
            gets the number of correlations; Property of uncertain variables. 
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.AllLinear">
            <summary>
            Gets/Sets the coefficient matrix of a linear model. Indexed by both Variable_Type and Function_Type.
            Property of linear functions. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.AllGradDepend">
            <summary>
            Gets/Sets the dependency matrix of a model; Indexed by both  Variable_Type and Function_Type
            Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.FcnQuadratic">
            <summary>
            Gets/Sets the coefficient matrix of a quadratic function; Indexed by  Function_Type, index, 
            and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.FcnHessDepend">
            <summary>
            Gets/Sets the dependency matrix of the Hessian in a model; Indexed by  Function_Type, index, 
            and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.DistType">
            <summary>
            Gets/Sets Distribution function; Property of uncertain variables.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.DistArguments">
            <summary>
            Gets/Sets the matrix of Distribution arguments; Property of uncertain variables.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.DistCorrelations">
            <summary>
            Gets/Sets the matrix of Distribution Correlations; Property of uncertain variables.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.NameVariable">
            <summary>
            Gets NameVariable. Reserved for future use.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.NameFunction">
            <summary>
            Gets NameFunction. Reserved for future use.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.IndexVariable">
            <summary>
            Gets Variable pointed to by index in the flat address space.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.IndexFunction">
            <summary>
            Gets Function pointed to by index in the flat address space.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.AllGradError">
            <summary>
            Gets the matrix of AllGradError elements; Can be used with a Jacobian evaluator. 
            Indexed by both  Variable_Type and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.AllGradValue">
            <summary>
            Gets/Sets the matrix of derivative values for a model. Indexed by both  Variable_Type 
            and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.Model.FcnHessValue">
            <summary>
            Gets/Sets the coefficients of a Hessian matrix for a function. Indexed by  Function_Type, 
            index, and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="T:SolverPlatform.NumVariablesCollection">
            <summary>
            Gets the Number of variables of particular type. Indexed by Variable_Type
            </summary>
        </member>
        <member name="P:SolverPlatform.NumVariablesCollection.Item(SolverPlatform.Variable_Type)">
            <summary>
            Gets the Number of variables of particular type. Indexed by Variable_Type
            </summary>
        </member>
        <member name="T:SolverPlatform.NumFunctionsCollection">
            <summary>
            Gets the Number of functions of particular type. Indexed by Function_Type.
            </summary>
        </member>
        <member name="P:SolverPlatform.NumFunctionsCollection.Item(SolverPlatform.Function_Type)">
            <summary>
            Gets the Number of functions of particular type. Indexed by Function_Type.
            </summary>
        </member>
        <member name="T:SolverPlatform.NumAllGradCollection">
            <summary>
            Gets the number of elements (nonzeroes) in the matrix associated with variable 
            and function type. (The same as prob.Model. AllGradValue[ftype].NumElements.)
            Indexed by both  Variable_Type and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.NumAllGradCollection.Item(SolverPlatform.Function_Type,SolverPlatform.Variable_Type)">
            <summary>
            Gets the number of elements (nonzeroes) in the matrix associated with variable 
            and function type. (The same as prob.Model. AllGradValue[ftype].NumElements.)
            Indexed by both  Variable_Type and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.NumAllGradCollection.Item(SolverPlatform.Function_Type)">
            <summary>
            Gets the number of elements (nonzeroes) in the matrix associated with variable 
            and function type. (The same as prob.Model. AllGradValue[ftype].NumElements.)
            Indexed by both  Variable_Type and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="T:SolverPlatform.NumFcnHessCollection">
            <summary>
            Gets Number of elements (nonzeroes) in Hessian matrices associated with function type, 
            index and variable type.(The same as prob.Model. FcnHessValue [ftype][Ind].NumElements.) 
            Indexed by  Function_Type, index and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.NumFcnHessCollection.Item(SolverPlatform.Function_Type,System.Int32,SolverPlatform.Variable_Type)">
            <summary>
            Gets Number of elements (nonzeroes) in Hessian matrices associated with function type, 
            index and variable type.(The same as prob.Model. FcnHessValue [ftype][Ind].NumElements.) 
            Indexed by  Function_Type, index and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.NumFcnHessCollection.Item(SolverPlatform.Function_Type,System.Int32)">
            <summary>
            Gets Number of elements (nonzeroes) in Hessian matrices associated with function type, 
            index and variable type.(The same as prob.Model. FcnHessValue [ftype][Ind].NumElements.) 
            Indexed by  Function_Type, index and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="T:SolverPlatform.AllLinearCollection">
            <summary>
            Gets/Sets the coefficient matrix of a linear model. Indexed by both Variable_Type and Function_Type
            Property of linear functions. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.AllLinearCollection.Item(SolverPlatform.Function_Type,SolverPlatform.Variable_Type)">
            <summary>
            Gets/Sets the coefficient matrix of a linear model. Indexed by both Variable_Type and Function_Type
            Property of linear functions. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.AllLinearCollection.Item(SolverPlatform.Function_Type)">
            <summary>
            Gets/Sets the coefficient matrix of a linear model. Indexed by both Variable_Type and Function_Type
            Property of linear functions. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="T:SolverPlatform.AllGradDependCollection">
            <summary>
            Gets/Sets the dependency matrix of a model; Indexed by both  Variable_Type and Function_Type
            Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.AllGradDependCollection.Item(SolverPlatform.Function_Type,SolverPlatform.Variable_Type)">
            <summary>
            Gets/Sets the dependency matrix of a model; Indexed by both  Variable_Type and Function_Type
            Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.AllGradDependCollection.Item(SolverPlatform.Function_Type)">
            <summary>
            Gets/Sets the dependency matrix of a model; Indexed by both  Variable_Type and Function_Type
            Variable_Type could be omitted.
            </summary>
        </member>
        <member name="T:SolverPlatform.FcnQuadraticCollection">
            <summary>
            Gets/Sets the coefficient matrix of a quadratic function; Indexed by  Function_Type, index, 
            and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.FcnQuadraticCollection.Item(SolverPlatform.Function_Type,System.Int32,SolverPlatform.Variable_Type)">
            <summary>
            Gets/Sets the coefficient matrix of a quadratic function; Indexed by  Function_Type, index, 
            and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.FcnQuadraticCollection.Item(SolverPlatform.Function_Type,System.Int32)">
            <summary>
            Gets/Sets the coefficient matrix of a quadratic function; Indexed by  Function_Type, index, 
            and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="T:SolverPlatform.FcnHessDependCollection">
            <summary>
            Gets/Sets the dependency matrix of the Hessian in a model; Indexed by  Function_Type, index, 
            and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.FcnHessDependCollection.Item(SolverPlatform.Function_Type,System.Int32)">
            <summary>
            Gets/Sets the dependency matrix of the Hessian in a model; Indexed by  Function_Type, index, 
            and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.FcnHessDependCollection.Item(SolverPlatform.Function_Type,System.Int32,SolverPlatform.Variable_Type)">
            <summary>
            Gets/Sets the dependency matrix of the Hessian in a model; Indexed by  Function_Type, index, 
            and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="T:SolverPlatform.AllGradErrorCollection">
            <summary>
            Gets the matrix of AllGradError elements; Can be used with a Jacobian evaluator. 
            Indexed by both  Variable_Type and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.AllGradErrorCollection.Item(SolverPlatform.Function_Type)">
            <summary>
            Gets the matrix of AllGradError elements; Can be used with a Jacobian evaluator. 
            Indexed by both  Variable_Type and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.AllGradErrorCollection.Item(SolverPlatform.Function_Type,SolverPlatform.Variable_Type)">
            <summary>
            Gets the matrix of AllGradError elements; Can be used with a Jacobian evaluator. 
            Indexed by both  Variable_Type and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="T:SolverPlatform.AllGradValueCollection">
            <summary>
            Gets/Sets the matrix of derivative values for a model. Indexed by both  Variable_Type 
            and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.AllGradValueCollection.Item(SolverPlatform.Function_Type)">
            <summary>
            Gets/Sets the matrix of derivative values for a model. Indexed by both  Variable_Type 
            and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.AllGradValueCollection.Item(SolverPlatform.Function_Type,SolverPlatform.Variable_Type)">
            <summary>
            Gets/Sets the matrix of derivative values for a model. Indexed by both  Variable_Type 
            and Function_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="T:SolverPlatform.FcnHessValueCollection">
            <summary>
            Gets/Sets the coefficients of a Hessian matrix for a function. Indexed by  Function_Type, 
            index, and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.FcnHessValueCollection.Item(SolverPlatform.Function_Type,System.Int32)">
            <summary>
            Gets/Sets the coefficients of a Hessian matrix for a function. Indexed by  Function_Type, 
            index, and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="P:SolverPlatform.FcnHessValueCollection.Item(SolverPlatform.Function_Type,System.Int32,SolverPlatform.Variable_Type)">
            <summary>
            Gets/Sets the coefficients of a Hessian matrix for a function. Indexed by  Function_Type, 
            index, and Variable_Type. Variable_Type could be omitted.
            </summary>
        </member>
        <member name="T:SolverPlatform.NameVariableCollection">
            <summary>
            Gets NameVariable. Reserved for future use.
            </summary>
        </member>
        <member name="P:SolverPlatform.NameVariableCollection.Item(System.String)">
            <summary>
            Gets NameVariable. Reserved for future use.
            </summary>
        </member>
        <member name="T:SolverPlatform.NameFunctionCollection">
            <summary>
            get/set NameFunction. Reserved for future use.
            </summary>
        </member>
        <member name="P:SolverPlatform.NameFunctionCollection.Item(System.String)">
            <summary>
            get/set NameFunction. Reserved for future use.
            </summary>
        </member>
        <member name="T:SolverPlatform.IndexVariableCollection">
            <summary>
            Gets Variable pointed to by index in the flat address space.
            </summary>
        </member>
        <member name="P:SolverPlatform.IndexVariableCollection.Item(System.Int32)">
            <summary>
            Gets Variable pointed to by index in the flat address space.
            </summary>
        </member>
        <member name="T:SolverPlatform.IndexFunctionCollection">
            <summary>
            Gets Function pointed to by index in the flat address space.
            </summary>
        </member>
        <member name="P:SolverPlatform.IndexFunctionCollection.Item(System.Int32)">
            <summary>
            Gets Function pointed to by index in the flat address space.
            </summary>
        </member>
        <member name="T:SolverPlatform.CaseCollection">
            <summary>
            Implements a collection of cases
            </summary>
        </member>
        <member name="M:SolverPlatform.CaseCollection.#ctor">
            <summary>
            Constructs CaseCollection object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.CaseCollection.Dispose">
            <summary>
            Disposes the collection. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.CaseCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:SolverPlatform.CaseCollection.Add(SolverPlatform.Case)">
            <summary>
            Adds a new case to the end of the collection.
            </summary>
            <param name="c">The case to be added to the end of the collection.</param>
            <returns>The index where the case has been added.</returns>
        </member>
        <member name="M:SolverPlatform.CaseCollection.Insert(System.Int32,SolverPlatform.Case)">
            <summary>
            Inserts a case into the collection at the specified index.
            </summary>
            <param name="Index">The zero-based index where new case should be inserted.</param>
            <param name="c">The case to insert</param>
        </member>
        <member name="M:SolverPlatform.CaseCollection.Remove(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="Index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:SolverPlatform.CaseCollection.Remove(System.String)">
            <summary>
            Removes the element with the specified name.
            The name is not case sensitive.
            </summary>
            <param name="Name">The name of the element to remove.</param>
        </member>
        <member name="M:SolverPlatform.CaseCollection.GetEnumerator">
            <summary>
            Returns an enumerator to the collection. Member of IEnumerable.
            </summary>
            <returns>An enumerator for the collection</returns>
        </member>
        <member name="P:SolverPlatform.CaseCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:SolverPlatform.CaseCollection.Item(System.Int32)">
            <summary>
            Gets the case at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.CaseCollection.Item(System.String)">
            <summary>
            Gets the case with the specified name.
            The name is not case sensitive.
            </summary>
        </member>
        <member name="T:SolverPlatform.Variable">
            <summary>
            Implements a vector of variables, all of the same type, in the Model.
            A Variable has properties that are "inputs" to the solution process, such as LowerBound, 
            UpperBound, IntegerType, and InitialValue, and properties that are "outputs" from the 
            solution process, such as FinalValue, DualValue, DualLower, and DualUpper.
            </summary>
        </member>
        <member name="M:SolverPlatform.Variable.#ctor">
            <summary>
            Constructs Variable object.
            </summary>
        </member>
        <member name="M:SolverPlatform.Variable.#ctor(SolverPlatform.Variable_Type)">
            <summary>
            Constructs Variable object. 
            </summary>
            <param name="vartype">The type of the variable.</param>
        </member>
        <member name="M:SolverPlatform.Variable.#ctor(SolverPlatform.Variable_Type,System.String)">
            <summary>
            Constructs Variable object. 
            </summary>
            <param name="vartype">The type of the variable.</param>
            <param name="Name">The name of the variable.</param>
        </member>
        <member name="M:SolverPlatform.Variable.#ctor(SolverPlatform.Variable_Type,System.String,System.Int32)">
            <summary>
            Constructs Variable object. 
            </summary>
            <param name="vartype">The type of the variable.</param>
            <param name="Name">The name of the variable.</param>
            <param name="Size">The size of the variable.</param>
        </member>
        <member name="M:SolverPlatform.Variable.Dispose">
            <summary>
            Disposes the variable. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.Variable.MakeCurrent">
            <summary>
            Makes this variable the current one for the associated problem.
            </summary>
        </member>
        <member name="M:SolverPlatform.Variable.GetCorrelation(System.Int32)">
            <summary>
            returns the correlation values between uncertain variables.
            </summary>
            <param name="varindex">index of other uncertain variable with which elements of this variable vector are correlated</param>
            <returns>correlation coefficients between other uncertain variable and elements of this variable vector</returns>
        </member>
        <member name="M:SolverPlatform.Variable.GetFrequency(SolverPlatform.Frequency_Type,System.Double[])">
            <summary>
            Returns frequency of observations in each bin – sorted up or down if Frequency_Type is cumulative.
            </summary>
            <param name="frequencytype">see Frequency_Type enum – density or cumulative</param>
            <param name="binBoundary">lower bound of each bin, extra element is upper bound of last bin</param>
            <returns>frequency of observations in each bin – sorted up or down if Frequency_Type is cumulative</returns>
        </member>
        <member name="M:SolverPlatform.Variable.NonNegative">
            <summary>
            Sets the lower bound to 0 of the variable vector, if no bound is given.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.Problem">
            <summary>
            Gets Problem associated to this variable.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.VariableType">
            <summary>
            Gets/Sets the type of the variable vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.Name">
            <summary>
            Gets/Sets the name of the variable vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.Size">
            <summary>
            Gets/Sets the number of elements in the variable vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.Index">
            <summary>
            Gets the index in Variables collection.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.Position">
            <summary>
            Gets the position of the variable vector; 
            Starting position of the variable vector in the Model flat address space.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.Value">
            <summary>
            Gets current values of the variable vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.Percentiles">
            <summary>
            Gets/Sets the matrix of Percentiles; Only for uncertain variables.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.AllTrials">
            <summary>
            Gets	the matrix of AllTrials; Only for uncertain variables.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.LowerBound">
            <summary>
            Gets/Sets lower bound of the variable vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.UpperBound">
            <summary>
            Gets/Sets upper bound of the variable vector. 
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.IntegerType">
            <summary>
            Gets/Sets integer type. Indicates what type of integer a variable is, if integer.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.GroupIndex">
            <summary>
            Gets/Sets group's index. Index to which AllDifferent group the variables belong.
            0 indicates that a variable is not a part of any AllDifferent group.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.ConeType">
            <summary>
            Gets/Sets cone type. Indicates what type of cone a variable belongs to, if part of a cone.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.ConeIndex">
            <summary>
            Gets/Sets cone index. Index to which Cone group a variable belongs.
            0 indicates that a variable is not part of a cone. 
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.InitialValue">
            <summary>
            Gets/Sets initial value of the variable vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.FinalValue">
            <summary>
            Gets final values of the variable vector after optimization or simulation.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.DualValue">
            <summary>
            Gets dual values of the variable vector. Dual values or reduced costs of the Variable vector.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.DualLower">
            <summary>
            Gets dual lower values of the variable vector. Lower range values of the objective coefficients for which the dual values are valid.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.DualUpper">
            <summary>
            Gets dual upper values of the variable vector; Upper range values of the objective coefficients for which the dual values are valid.
            </summary>
        </member>
        <member name="P:SolverPlatform.Variable.Statistics">
            <summary>
            Gets statistics for this variable.
            </summary>
        </member>
        <member name="T:SolverPlatform.EngineParamCollection">
            <summary>
            Implements a collection of engine parameters.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineParamCollection.#ctor">
            <summary>
            Constructs EngineParamCollection object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineParamCollection.Dispose">
            <summary>
            Disposes the collection. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineParamCollection.GetEnumerator">
            <summary>
            returns an enumerator to the collection
            </summary>
            <returns>an enumerator to the collection</returns>
        </member>
        <member name="P:SolverPlatform.EngineParamCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineParamCollection.Item(System.Int32)">
            <summary>
            Gets the parameter at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineParamCollection.Item(System.String)">
            <summary>
            Gets the parameter with the specified name.
            The name is not case sensitive.
            </summary>
        </member>
        <member name="T:SolverPlatform.DoubleBuffer">
            <summary>
            Implements a vector of doubles.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleBuffer.Item(System.Int32)">
            <summary>
            Gets/Sets the element at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleBuffer.Array">
            <summary>
            Gets/Sets the whole array of doubles.
            </summary>
        </member>
        <member name="T:SolverPlatform.DoubleBufferRO">
            <summary>
            Implements a read only vector of doubles.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleBufferRO.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.DoubleBufferRO.Array">
            <summary>
            Gets the whole array of doubles.
            </summary>
        </member>
        <member name="T:SolverPlatform.IntegerBuffer">
            <summary>
            Implements a vector of integers.
            </summary>
        </member>
        <member name="P:SolverPlatform.IntegerBuffer.Item(System.Int32)">
            <summary>
            Gets/Sets the element at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.IntegerBuffer.Array">
            <summary>
            Gets/Sets the whole array of integers.
            </summary>
        </member>
        <member name="T:SolverPlatform.IntegerBufferRO">
            <summary>
            Implements a read only vector of integers.
            </summary>
        </member>
        <member name="P:SolverPlatform.IntegerBufferRO.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.IntegerBufferRO.Array">
            <summary>
            Gets the whole array of integers.
            </summary>
        </member>
        <member name="T:SolverPlatform.IntegerTypeBuffer">
            <summary>
            Implements a vector of integer types.
            </summary>
        </member>
        <member name="P:SolverPlatform.IntegerTypeBuffer.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.IntegerTypeBuffer.Array">
            <summary>
            Gets/Sets the whole array of integer types.
            </summary>
        </member>
        <member name="T:SolverPlatform.ConeTypeBuffer">
            <summary>
            Implements a vector of cone types.
            </summary>
        </member>
        <member name="P:SolverPlatform.ConeTypeBuffer.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.ConeTypeBuffer.Array">
            <summary>
            Gets/Sets the whole array of cone types.
            </summary>
        </member>
        <member name="T:SolverPlatform.DistributionTypeBuffer">
            <summary>
            Implements a vector of distributions.
            </summary>
        </member>
        <member name="P:SolverPlatform.DistributionTypeBuffer.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.DistributionTypeBuffer.Array">
            <summary>
            Gets/Sets the whole array of distributions.
            </summary>
        </member>
        <member name="T:SolverPlatform.EngineLimit">
            <summary>
            Implements the limits for an engine.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineLimit.#ctor">
            <summary>
            Constructs CEngineLimit object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineLimit.Dispose">
            <summary>
            Disposes the object. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineLimit.VarUncertainLimit">
            <summary>
            Gets the maximum number of uncertain variables the current engine supports.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineLimit.FcnUncertainLimit">
            <summary>
            Gets the maximum number of uncertain functions the current engine supports.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineLimit.IterationLimit">
            <summary>
            Gets the maximum number of iterations the current engine should perform.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineLimit.CorrelationLimit">
            <summary>
            Gets the maximum number of correlations.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineLimit.VarDecisionLimit">
            <summary>
            Gets the maximum number of decision variables the current engine supports.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineLimit.FcnConstraintLimit">
            <summary>
            Gets the maximum number of constraint functions the current engine supports.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineLimit.VarBoundLimit">
            <summary>
            Gets the maximum number of bounds on the variables the current engine supports.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineLimit.VarIntegerLimit">
            <summary>
            Gets the maximum number of integer variables the current engine supports.
            </summary>
        </member>
        <member name="T:SolverPlatform.EngineParam">
            <summary>
            Implements a single engine parameter.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineParam.#ctor">
            <summary>
            Constructs CEngineParam object.
            In most of the cases used internally.
            </summary>
        </member>
        <member name="M:SolverPlatform.EngineParam.Dispose">
            <summary>
            Disposes the object. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineParam.Name">
            <summary>
            Gets the name of the engine parameter.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineParam.Value">
            <summary>
            Gets/Sets the value of the parameter.
            The value has to be between the minimum and the maximum.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineParam.Default">
            <summary>
            Gets the default value for the parameter.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineParam.MaxValue">
            <summary>
            Gets the maximum value for the parameter.
            The parameter Value property has not to be greater than its MaxValue.
            </summary>
        </member>
        <member name="P:SolverPlatform.EngineParam.MinValue">
            <summary>
            Gets the minimum value for the parameter.
            The parameter Value property has not to be less than its MinValue.
            </summary>
        </member>
        <member name="T:SolverPlatform.EvaluateEventHandler">
            <summary>
            EvaluateEventHandler class 
            </summary>
        </member>
        <member name="T:SolverPlatform.IISStatusBufferRO">
            <summary>
            Implements a vector of IIS_Status values.
            </summary>
        </member>
        <member name="P:SolverPlatform.IISStatusBufferRO.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
        </member>
        <member name="P:SolverPlatform.IISStatusBufferRO.Array">
            <summary>
            Gets the whole array of IIS_Status values.
            </summary>
        </member>
        <member name="T:SolverPlatform.INEvaluator">
            <summary>
            INEvaluator interface
            </summary>
        </member>
        <member name="T:SolverPlatform.APIerr">
            <summary>
            Specifies different types of exceptions.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Success">
            <summary>
            Successful operation.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.OutOfMemory">
            <summary>
            Out of memory.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.NotYetImplemented">
            <summary>
            This feature not implemented in this version.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.ProbPtr_Invalid">
            <summary>
            Invalid problem handle. A Problem must first be defined.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Problem_Undefined">
            <summary>
            Problem definition is incomplete.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.License_None">
            <summary>
            No license found.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.License_Invalid">
            <summary>
            No valid license found.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.License_Expired">
            <summary>
            License has expired.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.License_Remain">
            <summary>
            License usage exhausted.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Problem_Invalid">
            <summary>
            Problem is invalid.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Problem_Objsense">
            <summary>
            Problem type must be Solver_Type_Maximize, Solver_Type_Minimize, or Solver_Type_FindFeas.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.SPConLinear_Missing">
            <summary>
            Matrix is invalid. Majorstart or Minorindex is missing.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.SPConLinear_BegInvalid">
            <summary>
            Matrix is invalid. Majorstart values must be increasing, and less than the total number of elements in the matrix.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.SPConLinear_IdxInvalid">
            <summary>
            Matrix is invalid. Minorindex element is out of range.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.ObjJacDep_TypeInvalid">
            <summary>
            Objective Type is invalid.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Engine_DLLNotFound">
            <summary>
            Engine Library could not be found.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Engine_EntryNotFound">
            <summary>
            Engine entry point could not be found.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Engine_LoadFailed">
            <summary>
            Engine could not be loaded.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Engine_ProbMismatch">
            <summary>
            The selected engine can not solve a problem of this type. Please select another engine.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Engine_NotSupported">
            <summary>
            Engine could not be found.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Optimize_NoMultiThread">
            <summary>
            Multiple threads are not supported in this version.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Optimize_ResultMissing">
            <summary>
            Result is missing.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Optimize_AllDiffIdx">
            <summary>
            The group index for an alldifferent constraint must be 1 for the first constraint, 2 for the second, etc.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Optimize_AllDiffOne">
            <summary>
            An alldifferent constraint must include at least 2 variables.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Optimize_AllDiffBnd">
            <summary>
            The lower bounds on the variables in an alldifferent constraint must be 1; the upper bounds must be equal to the number of variables included in the constraint.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Param_Missing">
            <summary>
            Parameter does not exist.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Param_Value">
            <summary>
            Parameter value is out of range.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Collection_Index">
            <summary>
            Invalid index into the collection.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Optimize_ConeIdx">
            <summary>
            The group index for a cone constraint must be 1 for the first constraint, 2 for the second, etc.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Optimize_ConeOne">
            <summary>
            A cone constraint must include at least 2 variables.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Function_NotDefined">
            <summary>
            Function is not a member of the Function collection.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Variable_NotDefined">
            <summary>
            Variable is not a member of the Variable collection.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Variable_ProbInUse">
            <summary>
            Variable is already in use by another problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Function_ProbInUse">
            <summary>
            Function is already in use by another problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Function_NameExist">
            <summary>
            Function name is already in use.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Function_NameInvalid">
            <summary>
            Function name is invalid.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Variable_NameExist">
            <summary>
            Variable name is already in use.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Variable_NameInvalid">
            <summary>
            Variable name is invalid.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Case_NotSupported">
            <summary>
            Case is not a member of the Case collection.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Model_DistInvalid">
            <summary>
            Invalid distribution.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Save_Invalid">
            <summary>
            Problem could not be saved.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Engine_Standard">
            <summary>
            You can not unload one of the standard engines.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Load_Invalid">
            <summary>
            Problem could not be loaded.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Array_Bounds">
            <summary>
            Array is being accessed outside its bounds.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Invalid_Value">
            <summary>
            Invalid value.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Collection_Readonly">
            <summary>
            Collection can not be changed at this time.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Feature_Readonly">
            <summary>
            Feature becomes read only after assigning to a problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Assignment_Error">
            <summary>
            Objects are assigned to different problems.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.DifferentObjectTypes">
            <summary>
            Assignment between objects of different types.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.ObjectReinitialized">
            <summary>
            Previously inited object cannot be reinitialized.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.WrongArraySize">
            <summary>
            Input array size doesn't match calculated size.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.Unknown">
            <summary>
            Unexpected error. Please contact Technical Support.
            </summary>
        </member>
        <member name="F:SolverPlatform.APIerr.MatrixInFastUpdateMode">
            <summary>
            Operation cannot be performed because the matrix is in fast update mode.
            </summary>
        </member>
        <member name="T:SolverPlatform.License_Loc">
            <summary>
            Specifies the meaning of the licensing string.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_Loc.Str">
            <summary>
            The string contains the licensing information.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_Loc.Variable">
            <summary>
            The string is environment variable name.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_Loc.File">
            <summary>
            The string is the name/path of the license file.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_Loc.Registry">
            <summary>
            The string is the name/path of the Windows Registry entry.
            </summary>
        </member>
        <member name="T:SolverPlatform.License_SelectorCode">
            <summary>
            Specifies the selector code for the license.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_SelectorCode.PROM">
            <summary>
            The license is locked to the host ID PROM.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_SelectorCode.IPAddr">
            <summary>
            The license is locked to the host IP address.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_SelectorCode.DiskID">
            <summary>
            The license is locked to the host Disk ID.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_SelectorCode.HostName">
            <summary>
            The license is locked to the host name.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_SelectorCode.Ethernet">
            <summary>
            The license is locked to the host Ethernet Address.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_SelectorCode.NV_IPX">
            <summary>
            The license is locked to the host Netware IPX.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_SelectorCode.NV_Serial">
            <summary>
            The license is locked to the host Netware Serial.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_SelectorCode.PortableServ">
            <summary>
            The license is locked to the Computer ID key.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_SelectorCode.Custom">
            <summary>
            Custom code locking criteria. Not currently used.
            </summary>
        </member>
        <member name="F:SolverPlatform.License_SelectorCode.CPU">
            <summary>
            The license is locked to Processor ID.
            </summary>
        </member>
        <member name="T:SolverPlatform.Solver_Type">
            <summary>
            Specifies either optimization objective or simulation.
            </summary>
        </member>
        <member name="F:SolverPlatform.Solver_Type.Simulate">
            <summary>
            Simulation.
            </summary>
        </member>
        <member name="F:SolverPlatform.Solver_Type.Minimize">
            <summary>
            Minimization objective.
            </summary>
        </member>
        <member name="F:SolverPlatform.Solver_Type.Maximize">
            <summary>
            Maximization objective.
            </summary>
        </member>
        <member name="F:SolverPlatform.Solver_Type.FindFeas">
            <summary>
            Finding a feasible solution for the constraints, without an objective.
            </summary>
        </member>
        <member name="T:SolverPlatform.Depend_Type">
            <summary>
            Specifies the nature of an element in the matrix of function values.
            </summary>
        </member>
        <member name="F:SolverPlatform.Depend_Type.None">
            <summary>
            No matrix element present for this constraint and variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Depend_Type.Linear">
            <summary>
            The variable behaves linear for this constraint. (So the matrix element is constant).
            </summary>
        </member>
        <member name="F:SolverPlatform.Depend_Type.Quadratic">
            <summary>
            The variable is quadratic with respect to this constraint.
            </summary>
        </member>
        <member name="F:SolverPlatform.Depend_Type.Smooth">
            <summary>
            The variable is smooth nonlinear with respect to this constraint.
            </summary>
        </member>
        <member name="F:SolverPlatform.Depend_Type.Nonsmooth">
            <summary>
            The variable is non-smooth with respect to this constraint.
            </summary>
        </member>
        <member name="T:SolverPlatform.Problem_Type">
            <summary>
            Specifies the problem type.
            </summary>
        </member>
        <member name="F:SolverPlatform.Problem_Type.NA">
            <summary>
            Problem type not available. 
            </summary>
        </member>
        <member name="F:SolverPlatform.Problem_Type.OptLP">
            <summary>
            Linear optimization problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.Problem_Type.OptQP">
            <summary>
            Quadratic optimization problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.Problem_Type.OptQCP">
            <summary>
            Quadratically constrained optimization problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.Problem_Type.OptCVX">
            <summary>
            Convex optimization problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.Problem_Type.OptNLP">
            <summary>
            Non-linear optimization problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.Problem_Type.OptNSP">
            <summary>
            Non-smooth optimization problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.Problem_Type.SimIndep">
            <summary>
            Independent simulation problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.Problem_Type.SimCorrel">
            <summary>
            Correlational simulation problem.	
            </summary>
        </member>
        <member name="T:SolverPlatform.Variable_Type">
            <summary>
            Specifies the variable type.
            </summary>
        </member>
        <member name="F:SolverPlatform.Variable_Type.All">
            <summary>
            Specifies variables of all types.
            </summary>
        </member>
        <member name="F:SolverPlatform.Variable_Type.Case">
            <summary>
            Case variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Variable_Type.Uncertain">
            <summary>
            Uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Variable_Type.Decision">
            <summary>
            Decision variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Variable_Type.Recourse">
            <summary>
            Recourse variable.	(Not implemented yet.)
            </summary>
        </member>
        <member name="T:SolverPlatform.Function_Type">
            <summary>
            Specifies the function type.
            </summary>
        </member>
        <member name="F:SolverPlatform.Function_Type.All">
            <summary>
            Specifies functions of all types.
            </summary>
        </member>
        <member name="F:SolverPlatform.Function_Type.Case">
            <summary>
            Case function.
            </summary>
        </member>
        <member name="F:SolverPlatform.Function_Type.Uncertain">
            <summary>
            Uncertain function.
            </summary>
        </member>
        <member name="F:SolverPlatform.Function_Type.Objective">
            <summary>
            Objective function.
            </summary>
        </member>
        <member name="F:SolverPlatform.Function_Type.Constraint">
            <summary>
            Constraint function.
            </summary>
        </member>
        <member name="F:SolverPlatform.Function_Type.SoftConst">
            <summary>
            Soft constraint function. (Not implemented yet.) 
            </summary>
        </member>
        <member name="T:SolverPlatform.Eval_Type">
            <summary>
            Specifies the evaluation type.
            </summary>
        </member>
        <member name="F:SolverPlatform.Eval_Type.Simulation">
            <summary>
            Called for each simulation
            </summary>
        </member>
        <member name="F:SolverPlatform.Eval_Type.Subproblem">
            <summary>
            Called for each subproblem
            </summary>
        </member>
        <member name="F:SolverPlatform.Eval_Type.Iteration">
            <summary>
            Called for each iteration during optimization or simulation.
            </summary>
        </member>
        <member name="F:SolverPlatform.Eval_Type.NewSolution">
            <summary>
            Called when a new solution (incumbent) is found.
            </summary>
        </member>
        <member name="F:SolverPlatform.Eval_Type.Function">
            <summary>
            Called to compute the objective and the function values for an optimization.
            </summary>
        </member>
        <member name="F:SolverPlatform.Eval_Type.Gradient">
            <summary>
            Called to compute the objective and function gradients.	
            </summary>
        </member>
        <member name="F:SolverPlatform.Eval_Type.GradError">
            <summary>
            Called when Derivatives option = 4, and the user wants to test his own derivatives.
            </summary>
        </member>
        <member name="F:SolverPlatform.Eval_Type.Hessian">
            <summary>
            Called to compute Hessian values (= 2nd order derivatives) for a specific function.
            </summary>
        </member>
        <member name="F:SolverPlatform.Eval_Type.Sample">
            <summary>
            Called to compute the objective and the function values for a simulation.
            </summary>
        </member>
        <member name="F:SolverPlatform.Eval_Type.Trial">
            <summary>
            Called at every trial of a simulation.
            </summary>
        </member>
        <member name="T:SolverPlatform.Engine_Action">
            <summary>
            Specifies the Engine action.
            </summary>
        </member>
        <member name="F:SolverPlatform.Engine_Action.Continue">
            <summary>
            Continuing evaluation.	The Solver continues the optimization; this is the “normal” return code.
            </summary>
        </member>
        <member name="F:SolverPlatform.Engine_Action.Evaluate">
            <summary>
            Starting evaluation.	The Solver should call the “Function Evaluator” next, in order to pass the current set of variable values.
            This can be used when you want to know the exact variable values at a specific point. You would also have to set some kind 
            of flag to let his own function evaluator know that it is being called for this reason.
            </summary>
        </member>
        <member name="F:SolverPlatform.Engine_Action.Stop">
            <summary>
            Halting evaluation. (Aborts optimization or simulation.)
            </summary>
        </member>
        <member name="T:SolverPlatform.Array_Order">
            <summary>
            Specifies the arrangement of elements in a matrix.
            </summary>
        </member>
        <member name="F:SolverPlatform.Array_Order.ByRow">
            <summary>
            Arrangement by row. Elements of the matrix are passed or expected in row-wise order.
            </summary>
        </member>
        <member name="F:SolverPlatform.Array_Order.ByCol">
            <summary>
            Arrangement by colum. Elements of the matrix are passed or expected in column-wise order.
            </summary>
        </member>
        <member name="T:SolverPlatform.File_Format">
            <summary>
            Specifies file format.
            </summary>
        </member>
        <member name="F:SolverPlatform.File_Format.All">
            <summary>
            Specifies file format that will be automatically recognized by Solver Platform SDK.
            </summary>
        </member>
        <member name="F:SolverPlatform.File_Format.LP">
            <summary>
            LP file format.	Text-only file format for linear and quadratic problems.
            </summary>
        </member>
        <member name="F:SolverPlatform.File_Format.MPS">
            <summary>
            MPS file format (for linear and quadratic problems).
            </summary>
        </member>
        <member name="F:SolverPlatform.File_Format.LPFML">
            <summary>
            LPFML file format (XML-based) for linear problems.
            </summary>
        </member>
        <member name="T:SolverPlatform.Distribution_Type">
            <summary>
            Specifies the distribution type for an uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.None">
            <summary>
            Distribution type is not defined.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Bernoulli">
            <summary>
            Bernoulli distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Beta">
            <summary>
            Beta distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Binomial">
            <summary>
            Binomial distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Chisquared">
            <summary>
            Chisquared distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.DiscreteUniform">
            <summary>
            Discrete uniform distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Erf">
            <summary>
            Erf  distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Erlang">
            <summary>
            Erlang distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Exponential">
            <summary>
            Exponential distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Gamma">
            <summary>
            Gamma distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Geometric">
            <summary>
            Geometric distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Hypergeometric">
            <summary>
            Hypergeometric distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.IntegerUniform">
            <summary>
            Integer Uniform distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.InverseGaussian">
            <summary>
            Inverse Gaussian distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Logistic">
            <summary>
            Logistic distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Loglogistic">
            <summary>
            Loglogistic distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Lognormal">
            <summary>
            Lognormal distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.NegativeBinomial">
            <summary>
            Negative binomial distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Normal">
            <summary>
            Normal distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Pareto">
            <summary>
            Pareto distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Poisson">
            <summary>
            Poisson distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Rayleigh">
            <summary>
            Rayleigh distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Student">
            <summary>
            Student distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Triangular">
            <summary>
            Triangular distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.TriGeneral">
            <summary>
            Trigeneral distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Uniform">
            <summary>
            Uniform distribution of the uncertain variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Distribution_Type.Weibull">
            <summary>
            Weibull distribution of the uncertain variable.
            </summary>
        </member>
        <member name="T:SolverPlatform.Frequency_Type">
            <summary>
            Specifies the frequency type.
            </summary>
        </member>
        <member name="F:SolverPlatform.Frequency_Type.Density">
            <summary>
            Probability density function values are returned.
            </summary>
        </member>
        <member name="F:SolverPlatform.Frequency_Type.Cumulative">
            <summary>
            Cumulative (low to high) frequency values are returned.
            </summary>
        </member>
        <member name="F:SolverPlatform.Frequency_Type.RevCumulative">
            <summary>
            Reverse cumulative (high to low) frequency values are returned.
            </summary>
        </member>
        <member name="T:SolverPlatform.Simulate_Status">
            <summary>
            Specifies the status of a simulation.
            </summary>
        </member>
        <member name="F:SolverPlatform.Simulate_Status.Complete">
            <summary>
            Completed status.
            </summary>
        </member>
        <member name="F:SolverPlatform.Simulate_Status.Lic_Problem">
            <summary>
            Missing or invalid simulation license problem.		
            </summary>
        </member>
        <member name="F:SolverPlatform.Simulate_Status.User_Abort">
            <summary>
            Simulation aborted by user.		
            </summary>
        </member>
        <member name="F:SolverPlatform.Simulate_Status.Memory_Dearth">
            <summary>
            Memory dearth status.
            </summary>
        </member>
        <member name="T:SolverPlatform.Optimize_Status">
            <summary>
            Specifies the status of an optimization.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Invalid">
            <summary>
            Invalid status. Can be returned for API_QQ_RESTART_SOLVE.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Ignore">
            <summary>
            Ignore status. Used when dummy result code needs to be overridden.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Lic_Problem">
            <summary>
            Invalid license status. (License expired, missing, invalid, etc.)
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Optimal">
            <summary>
            Optimal solution has been found.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Converged">
            <summary>
            The Solver has converged to the current solution.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.No_Remedies">
            <summary>
            "No remedies" status. (All remedies failed to find better point.)
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Iterate_Limit">
            <summary>
            Iterates limit reached. Indicates an early exit of the algorithm.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Unbounded">
            <summary>
            Optimizing an unbounded objective function.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Unfeasible">
            <summary>
            Feasible solution could not be found.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.User_Abort">
            <summary>
            Optimization aborted by user. Indicates an early exit of the algorithm.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Linear_Invalid">
            <summary>
            Invalid linear model. Returned when a linearity assumption renders incorrect.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Bad_Dataset">
            <summary>
            Bad data set status. Returned when a problem data set renders inconsistent. 
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Float_Err">
            <summary>
            Float error status. (Internal float error.)
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Time_Out">
            <summary>
            Time out status. Returned when the maximum allowed time has been exceeded. Indicates an early exit of the algorithm.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Memory_Dearth">
            <summary>
            Memory dearth status. Returned when the system cannot allocate enough memory to perform the optimization.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Interpret_Err">
            <summary>
            Interpretation error. (Parser, Diagnostics, or Executor error.)
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Api_Err">
            <summary>
            Fatal API error. (API not responding.)
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Incumb_Cand">
            <summary>
            The Solver has found an integer solution within integer tolerance.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Bbnode_Limit">
            <summary>
            Branching and bounding node limit reached. Indicates an early exit of the algorithm.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Bbmips_Limit">
            <summary>
            Branching and bounding maximum number of incumbent points reached. Indicates an early exit of the algorithm.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Probable">
            <summary>
            Probable global optimum reached. Returned when MSL (Bayesian) global optimality test has been satisfied.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Bounds_Missing">
            <summary>
            Missing bounds status. Returned for EV/MSL Require Bounds when bounds are missing.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Bounds_Conflict">
            <summary>
            Bounds conflict status. Indicates &lt;= =&gt; = bounds conflict with existing binary or alldifferent constraints.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Bounds_Inconsist">
            <summary>
            Bounds inconsistency status. Returned when the lower bound value of a variable is grater than the upper bound value,
            i.e. lb[i] &gt; ub[i] for some variable bound i.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Derivative_Err">
            <summary>
            Derivative error. Returned when API_Jacobian has not been able to compute gradients.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Cone_Overlap">
            <summary>
            Cone overlap status. Returned when a variable appears in more than one cone.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Exception">
            <summary>
            Exception occurred status. Returned when an exception has been caught by try/catch top-level.
            </summary>
        </member>
        <member name="F:SolverPlatform.Optimize_Status.Custom_Base">
            <summary>
            Custom base status. (Base for Solver engine custom results.)
            </summary>
        </member>
        <member name="T:SolverPlatform.Integer_Type">
            <summary>
            Specifies the type of an integer variable.
            </summary>
        </member>
        <member name="F:SolverPlatform.Integer_Type.None">
            <summary>
            No integer type specified (Default.) The variable is continuous, i.e. 3.6, etc.
            </summary>
        </member>
        <member name="F:SolverPlatform.Integer_Type.Integer">
            <summary>
            Standard integer type. The Variable is integer, i.e. -5, -3, 2, 12, etc..
            </summary>
        </member>
        <member name="F:SolverPlatform.Integer_Type.Binary">
            <summary>
            Integer of binary type.	Variable is binary, i.e. exactly 0 or 1.
            </summary>
        </member>
        <member name="F:SolverPlatform.Integer_Type.Alldifferent">
            <summary>
            different,Integer of alldifferent type.		The variable is part of an alldiffernt group.
            If N variables are part of the same alldifferent group, it means that their value will be from 1 though N,
            or any permutation thereof. For example, 
            if N=3, the three varaibles will be 1, 2, 3 or 1, 3, 2 or 2, 1, 3 or 2, 3, 1 or 3, 1, 2 or 3, 2, 1.
            </summary>
        </member>
        <member name="F:SolverPlatform.Integer_Type.Mask">
            <summary>
            Mask for integer types
            </summary>
        </member>
        <member name="F:SolverPlatform.Integer_Type.Semicont">
            <summary>
            Flag that marks variable is semicontinuous. Can be or-ed with the other integer types.
            For example:
            Integer_Type.Semicont | Integer_Type.Integer
            </summary>
        </member>
        <member name="T:SolverPlatform.Cone_Type">
            <summary>
            Specifies the cone type.
            </summary>
        </member>
        <member name="F:SolverPlatform.Cone_Type.None">
            <summary>
            The variable is not part of a cone constraint.
            </summary>
        </member>
        <member name="F:SolverPlatform.Cone_Type.SOC">
            <summary>
            The variable is member of the cone.
            </summary>
        </member>
        <member name="F:SolverPlatform.Cone_Type.SOC_Start">
            <summary>
            The variable is head of the cone.
            </summary>
        </member>
        <member name="F:SolverPlatform.Cone_Type.SRC">
            <summary>
            The variable is part of rotated cone.
            </summary>
        </member>
        <member name="F:SolverPlatform.Cone_Type.SRC_Start">
            <summary>
            The variable is head of rotated cone.
            </summary>
        </member>
        <member name="T:SolverPlatform.Cons_Rel">
            <summary>
            Specifies the relation between the left-hand side and the right-hand side of the constraints. 
            </summary>
        </member>
        <member name="F:SolverPlatform.Cons_Rel.LE">
            <summary>
            Less than or Equal to.
            </summary>
        </member>
        <member name="F:SolverPlatform.Cons_Rel.EQ">
            <summary>
            Equal to.
            </summary>
        </member>
        <member name="F:SolverPlatform.Cons_Rel.GE">
            <summary>
            Greater than or Equal to.
            </summary>
        </member>
        <member name="T:SolverPlatform.IIS_Status">
            <summary>
            Specifies the status of the Irreducibly Infeasible Subset (IIS) of constraints.
            </summary>
        </member>
        <member name="F:SolverPlatform.IIS_Status.LowerBound">
            <summary>
            Lower bound status. Indicates that the lower bound of a variable contributes to the infeasibility of the optimization problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.IIS_Status.Fixed">
            <summary>
            Fixed status. Indicates that both the upper and lower bounds of a variable contribute to the infeasibility of the optimization problem.
            </summary>
        </member>
        <member name="F:SolverPlatform.IIS_Status.UpperBound">
            <summary>
            Upper bound status. Indicates that the upper bound of a variable contributes to the infeasibility of the optimization problem.
            </summary>
        </member>
        <member name="T:SolverPlatform.DistFit_Type">
            <summary>
            Types of distributions that can be fitted.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.Bernoulli">
            <summary>
            Bernoulli Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.Beta">
            <summary>
            Beta Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.Binomial">
            <summary>
            Binomial Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.Exponential">
            <summary>
            Exponential Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.Gamma">
            <summary>
            Gamma Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.Geometric">
            <summary>
            Geometric Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.IntUniform">
            <summary>
            IntUniform Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.LogNormal">
            <summary>
            LogNormal Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.NegBinomial">
            <summary>
            NegBinomial Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.Normal">
            <summary>
            Normal Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.Poisson">
            <summary>
            Poisson Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.Uniform">
            <summary>
            Uniform Distribution Type.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistFit_Type.Weibull">
            <summary>
            Weibull Distribution Type.
            </summary>
        </member>
        <member name="T:SolverPlatform.DistParam_Type">
            <summary>
            Types of distribution parameters.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.LowerCut">
            <summary>
            LowerCut Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.UpperCut">
            <summary>
            UpperCut Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Shift">
            <summary>
            Shift Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Location">
            <summary>
            Location Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Scale">
            <summary>
            Scale Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Shape">
            <summary>
            Shape Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Alpha">
            <summary>
            Alpha Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Alpha1">
            <summary>
            Alpha1 Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Alpha2">
            <summary>
            Alpha2 Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Beta">
            <summary>
            Beta Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Gamma">
            <summary>
            Gamma Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Lambda">
            <summary>
            Lambda Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Mu">
            <summary>
            Mu Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Nu">
            <summary>
            Nu Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Sigma">
            <summary>
            Sigma Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Theta">
            <summary>
            Theta Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.A">
            <summary>
            A Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.B">
            <summary>
            B Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.C">
            <summary>
            C Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.D">
            <summary>
            D Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.M">
            <summary>
            M Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.N">
            <summary>
            N Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Q">
            <summary>
            Q Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.S">
            <summary>
            S Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Lower">
            <summary>
            Lower Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Upper">
            <summary>
            Upper Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Bottom">
            <summary>
            Bottom Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Top">
            <summary>
            Top Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.BotPerc">
            <summary>
            BotPerc Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.TopPerc">
            <summary>
            TopPerc Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Min">
            <summary>
            Min Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Max">
            <summary>
            Max Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Likely">
            <summary>
            Likely Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Mean">
            <summary>
            Mean Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Stdev">
            <summary>
            Stdev Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Var">
            <summary>
            Var Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Rate">
            <summary>
            Rate Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.DegFr">
            <summary>
            DegFr Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Data">
            <summary>
            Data Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Value">
            <summary>
            Value Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Prob">
            <summary>
            Prob Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Trials">
            <summary>
            Trials Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.SamSize">
            <summary>
            SamSize Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.PopSize">
            <summary>
            PopSize Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Items">
            <summary>
            Items Distribution Parameter.
            </summary>
        </member>
        <member name="F:SolverPlatform.DistParam_Type.Successes">
            <summary>
            Successes Distribution Parameter.
            </summary>
        </member>
        <member name="T:SolverPlatform.Case">
            <summary>
            Implements a case or scenario (with associated Case Variable or 
            parameter values) for which the user wants to find a Solution.
            </summary>
        </member>
        <member name="M:SolverPlatform.Case.#ctor">
            <summary>
            Creates new case.
            </summary>
        </member>
        <member name="M:SolverPlatform.Case.Dispose">
            <summary>
            Disposes the case. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.Case.MakeCurrent">
            <summary>
            Make this case current in associated problem (property problem.Case).
            </summary>
        </member>
        <member name="P:SolverPlatform.Case.Problem">
            <summary>
            Gets Problem associated to this case.
            </summary>
        </member>
        <member name="P:SolverPlatform.Case.Name">
            <summary>
            Gets/Sets name of the case.
            </summary>
        </member>
        <member name="P:SolverPlatform.Case.Index">
            <summary>
            Gets the index in case collection.
            </summary>
        </member>
        <member name="P:SolverPlatform.Case.Model">
            <summary>
            Gets current model.
            </summary>
        </member>
        <member name="P:SolverPlatform.Case.Engine">
            <summary>
            Gets current engine.
            </summary>
        </member>
        <member name="P:SolverPlatform.Case.Variables">
            <summary>
            Gets variables in the case.
            </summary>
        </member>
        <member name="P:SolverPlatform.Case.Functions">
            <summary>
            Gets functions in the case.
            </summary>
        </member>
        <member name="T:SolverPlatform.Engine">
            <summary>
            Class CEngine represents implementation of a Solver that can carry out its type 
            of analysis or solution, on a Model, yielding solution values that are accessed 
            through the Variable and Function objects, and performance statistics that are 
            accessed through the Engine object.
            </summary>
        </member>
        <member name="F:SolverPlatform.Engine.LPQPName">
            <summary>
            The name of the build in LP/QP engine.
            </summary>
        </member>
        <member name="F:SolverPlatform.Engine.LPName">
            <summary>
            The name of the build in LP Simplex engine.
            </summary>
        </member>
        <member name="F:SolverPlatform.Engine.SOCPName">
            <summary>
            The name of the build in SOCP Barrier engine.
            </summary>
        </member>
        <member name="F:SolverPlatform.Engine.GRGName">
            <summary>
            The name of the build in GRG Nonlinear engine.
            </summary>
        </member>
        <member name="F:SolverPlatform.Engine.EVOName">
            <summary>
            The name of the build in Evolutionary engine.
            </summary>
        </member>
        <member name="F:SolverPlatform.Engine.MCSName">
            <summary>
            The name of the build in Monte Carlo Simulation engine.
            </summary>
        </member>
        <member name="M:SolverPlatform.Engine.#ctor">
            <summary>
            Creates an empty Engine.
            </summary>
        </member>
        <member name="M:SolverPlatform.Engine.#ctor(System.String,System.String)">
            <summary>
            Creates engine object and loads external engine dynamic library.
            </summary>
            <param name="Name">the name of the engine. If empty string then name, defined inside engine DLL is used.</param>
            <param name="FileSpec">the path to the engine dynamic library.</param>
        </member>
        <member name="M:SolverPlatform.Engine.Dispose">
            <summary>
            Disposes the engine. Frees all allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:SolverPlatform.Engine.get_Limit(SolverPlatform.Problem_Type)">
            <summary>
            Gets the engine limits indexed by problem type.
            </summary>
            <param name="Index">The type of the problem for which we require the limits.</param>
            <returns>The engine limits for required problem type.</returns>
        </member>
        <member name="M:SolverPlatform.Engine.Init(System.String,System.String)">
            <summary>
            Loads external engine dynamic library.
            Method is valid only when empty constructor was used. 
            </summary>
            <param name="Name">The name of the engine. If string then name defined inside engine DLL is used.</param>
            <param name="FileSpec">The path to the engile dynamic library.</param>
        </member>
        <member name="M:SolverPlatform.Engine.MakeCurrent">
            <summary>
            Makes this Engine the current one for the associated problem.
            </summary>
        </member>
        <member name="M:SolverPlatform.Engine.ParamLoad(System.String)">
            <summary>
            Loads engine parameters from a file.
            <param name="FileName">The path to engine parameter file.</param>
            </summary>
        </member>
        <member name="M:SolverPlatform.Engine.ParamSave(System.String)">
            <summary>
            Saves engine parameters to a file.
            <param name="FileName">The path to engine parameter file.</param>
            </summary>
        </member>
        <member name="M:SolverPlatform.Engine.ParamReset">
            <summary>
            Resets all engine parameters to their default values.
            </summary>
        </member>
        <member name="P:SolverPlatform.Engine.Problem">
            <summary>
            Gets Problem associated to this engine.
            </summary>
        </member>
        <member name="P:SolverPlatform.Engine.SolverType">
            <summary>
            Gets the Solver Type.
            </summary>
        </member>
        <member name="P:SolverPlatform.Engine.ProblemType">
            <summary>
            Gets the type of the problems current engine could solve.
            </summary>
        </member>
        <member name="P:SolverPlatform.Engine.TrialPeriod">
            <summary>
            Gets the number of days until Solver Platform SDK trial license expires.
            </summary>
        </member>
        <member name="P:SolverPlatform.Engine.Name">
            <summary>
            Gets the name of this Engine.
            </summary>
        </member>
        <member name="P:SolverPlatform.Engine.FileSpec">
            <summary>
            Gets the file location of the engine dynamic library.
            Empty string for build-in engines.
            </summary>
        </member>
        <member name="P:SolverPlatform.Engine.Limit">
            <summary>
            Gets the engine limits indexed by problem type.
            </summary>
        </member>
        <member name="P:SolverPlatform.Engine.Index">
            <summary>
            Gets the index in EngineCollection this engine belongs to.
            </summary>
        </member>
        <member name="P:SolverPlatform.Engine.Stat">
            <summary>
            Gets current engine status.
            </summary>
        </member>
        <member name="P:SolverPlatform.Engine.Params">
            <summary>
            Gets all parameters for this engine.
            </summary>
        </member>
    </members>
</doc>
